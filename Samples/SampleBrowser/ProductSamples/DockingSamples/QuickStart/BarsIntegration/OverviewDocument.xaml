<sampleBrowser:SimpleFlowDocument
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:sampleBrowser="clr-namespace:ActiproSoftware.SampleBrowser"
	xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared"
	>

	<Paragraph>
		WPF will move focus to the last-focused control within a Window when the Window is activated.
		This can be a problem when working with floating docking windows and wanting to use a main Window's ribbon or toolbar to execute commands on the active floating docking window.
		As soon as a ribbon or toolbar's button is clicked, the main Window is activated, which then can focus another docking window within the main Window,
		causing the button's command to work on it instead of the intended floating docking window.
	</Paragraph>

	<Paragraph>
		The Actipro WindowChrome class has a CanMouseActivateOverToolBar property that can be set to false to prevent toolbar clicks from activating the Window.
		A toolbar is considered any control with the WindowChrome.ElementKind attached property set to ToolBar.
		Bars' Ribbon and StandaloneToolBar controls have this attached property set by default.
	</Paragraph>

	<Paragraph>
		.NET also has a couple properties applied in the MainWindow's constructor that help prevent Window activation when working with menus, 
		such as a menu that opens when pressing a BarPopupButton.
	</Paragraph>

	<Paragraph>
		When these features are combined, controls on main Window ribbons and toolbars can execute commands on active floating document windows.
	</Paragraph>
	
	<sampleBrowser:ExternalSampleLauncherUIContainer />

</sampleBrowser:SimpleFlowDocument>