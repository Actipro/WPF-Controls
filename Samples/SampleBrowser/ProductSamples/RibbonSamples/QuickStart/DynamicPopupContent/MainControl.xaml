<sampleBrowser:ProductItemControl 
	x:Class="ActiproSoftware.ProductSamples.RibbonSamples.QuickStart.DynamicPopupContent.MainControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared"	
    xmlns:ribbon="http://schemas.actiprosoftware.com/winfx/xaml/ribbon"
	xmlns:ribbonSamplesCommon="clr-namespace:ActiproSoftware.ProductSamples.RibbonSamples.Common" 
    xmlns:sampleBrowser="clr-namespace:ActiproSoftware.SampleBrowser"
    xmlns:themes="http://schemas.actiprosoftware.com/winfx/xaml/themes"
	>

	<sampleBrowser:ProductItemControl.SideBarContent>
		<StackPanel>

			<Expander Style="{StaticResource SampleHeaderDescriptionExpanderStyle}">
				<TextBlock Style="{StaticResource SampleHeaderDescriptionTextBlockStyle}">
					Actipro Ribbon makes it easy to dynamically create/change a popup's content before the popup is displayed.
					This feature is most commonly used to customize menu items for a popup that contains a menu.
					<LineBreak /><LineBreak />
					The PopupControlService class has a PopupOpening event that fires before a popup is displayed.
					This event is implemented on all of the ribbon controls.
					You can attach to this event on any ribbon control that has a popup (such as PopupButton and SplitButton)
					and in that handler, alter the popup content however you require.
					<LineBreak /><LineBreak />
					To see an implementation of this feature, click the PopupButton.
					The code-behind attaches to the button's PopupOpening event and dynamically
					creates content for the popup.
					<LineBreak /><LineBreak />
					Click the button several times to see some special alternate content.
				</TextBlock>
			</Expander>

		</StackPanel>
	</sampleBrowser:ProductItemControl.SideBarContent>

	<Grid Style="{StaticResource SamplePanelFullStyle}">

		<shared:ShadowChrome Elevation="16" ShadowOpacity="{DynamicResource {x:Static themes:AssetResourceKeys.ShadowOpacitySoftDoubleKey}}">
			<Border BorderThickness="1" BorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.WindowBorderActiveBrushKey}}"
					Background="{DynamicResource {x:Static themes:AssetResourceKeys.WindowBackgroundNormalBrushKey}}">
				<Grid>
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition Height="*" />
					</Grid.RowDefinitions>

					<TextBox Grid.Row="1" BorderThickness="0" AcceptsReturn="True" />
				
					<!-- Ribbon Control -->
					<ribbon:Ribbon x:Name="ribbon" IsCollapsible="False">
						<!-- 
							Use pre-defined WordApplicationMenu type in the sample project so that we don't have redundant code 
							in this sample that takes away from the focus of the sample
						-->
						<ribbon:Ribbon.ApplicationMenu>
							<ribbonSamplesCommon:WordApplicationMenu />	
						</ribbon:Ribbon.ApplicationMenu>
						<ribbon:Ribbon.QuickAccessToolBarItems>
							<ribbon:Button ImageSourceSmall="/Images/Icons/Save16.png" Label="Save" />
							<ribbon:Button ImageSourceSmall="/Images/Icons/Undo16.png" Label="Undo" />
							<ribbon:Button ImageSourceSmall="/Images/Icons/Redo16.png" Label="Redo" />
						</ribbon:Ribbon.QuickAccessToolBarItems>
						<ribbon:Ribbon.Tabs>
							<ribbon:Tab Label="Home">
								<ribbon:Group Label="Sample">
			
									<ribbon:PopupButton ImageSourceLarge="/Images/Icons/Paste32.png" Label="Popup Button with Dynamic Content" 
										ScreenTipDescription="Click the button to see dynamic content in the popup."
										PopupOpening="OnPopupButtonPopupOpening" />
						
								</ribbon:Group>
							</ribbon:Tab>
						</ribbon:Ribbon.Tabs>
					</ribbon:Ribbon>
		
				</Grid>
			</Border>
		</shared:ShadowChrome>
	</Grid>

</sampleBrowser:ProductItemControl>
