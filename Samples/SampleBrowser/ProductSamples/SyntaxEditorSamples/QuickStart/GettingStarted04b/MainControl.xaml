<UserControl x:Class="ActiproSoftware.ProductSamples.SyntaxEditorSamples.QuickStart.GettingStarted04b.MainControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:docking="http://schemas.actiprosoftware.com/winfx/xaml/docking"
	xmlns:editor="http://schemas.actiprosoftware.com/winfx/xaml/syntaxeditor"
	xmlns:themes="http://schemas.actiprosoftware.com/winfx/xaml/themes"
    xmlns:sample="clr-namespace:ActiproSoftware.ProductSamples.SyntaxEditorSamples.QuickStart.GettingStarted04b"
    >

	<docking:DockSite>
		<docking:SplitContainer>
			
			<docking:SplitContainer Orientation="Vertical">
			
				<docking:Workspace Background="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerBackgroundLowBrushKey}}">
					
					<!-- SyntaxEditor -->
					<editor:SyntaxEditor x:Name="editor" DocumentParseDataChanged="OnEditorDocumentParseDataChanged">
						<editor:EditorDocument xml:space="preserve">
							<editor:EditorDocument.Language>
								<sample:SimpleSyntaxLanguage />
							</editor:EditorDocument.Language><![CDATA[/*
	In this sample we've added tree constructors to the non-
	terminal productions in the grammar.  This allows us to
	create very concise and meaningful AST output.  Compare 
	the AST output in this step to the output from the previous 
	step, which used default tree construction.
	
	The LL(*) Parser Framework documentation describes in
	detail how to customize tree construction.  The inline
	comments in the updated grammar class for this step
	also provide helpful insight into what each tree
	constructor does.
	
	In the next step we'll update the grammar to properly
	handle and recover from parse error scenarios.
*/

function Add(x, y) {
	return x + y;
}

function Increment(x) {
	return (x + 1);
}

function IncrementAndMultiply(x, y) {
	// This function calls another function
	var result;
	result = Increment(x);
	return result * y;
}
]]></editor:EditorDocument>

					</editor:SyntaxEditor>

				</docking:Workspace>

				<docking:ToolWindowContainer>
					<docking:ToolWindow Title="Error List" ImageSource="/Images/Icons/ErrorList16.png" CanClose="False" ContainerDockedSize="200,150">
						<ListView x:Name="errorListView" BorderThickness="0" MouseDoubleClick="OnErrorListViewDoubleClick">
							<ListView.View>
								<GridView>
									<GridViewColumn Header="Line" Width="40" DisplayMemberBinding="{Binding Path=PositionRange.StartPosition.DisplayLine}" />
									<GridViewColumn Header="Char" Width="40" DisplayMemberBinding="{Binding Path=PositionRange.StartPosition.DisplayCharacter}" />
									<GridViewColumn Header="Description" Width="300" DisplayMemberBinding="{Binding Path=Description}" />
								</GridView>
							</ListView.View>
						</ListView>
					</docking:ToolWindow>
				</docking:ToolWindowContainer>
			</docking:SplitContainer>
				
			<docking:ToolWindowContainer>
				<docking:ToolWindow Title="Document Outline" ImageSource="/Images/Icons/DocumentOutline16.png" CanClose="False" ContainerDockedSize="230,200">
					<editor:SyntaxEditor x:Name="astOutputEditor" 
											BorderThickness="0" IsOutliningMarginVisible="False" IsSelectionMarginVisible="False" CanSplitHorizontally="False">
						<editor:EditorDocument IsReadOnly="true" />
					</editor:SyntaxEditor>
				</docking:ToolWindow>
				<docking:ToolWindow Title="EBNF" ImageSource="/Images/Icons/CallStack16.png" CanClose="False" ContainerDockedSize="230,200">
					<editor:SyntaxEditor x:Name="ebnfEditor" 
											BorderThickness="0" IsOutliningMarginVisible="False" IsSelectionMarginVisible="False" CanSplitHorizontally="False">
						<editor:EditorDocument IsReadOnly="true" />
					</editor:SyntaxEditor>
				</docking:ToolWindow>
			</docking:ToolWindowContainer>
					
		</docking:SplitContainer>
	</docking:DockSite>

</UserControl>
