<UserControl x:Class="ActiproSoftware.ProductSamples.SyntaxEditorSamples.QuickStart.GettingStarted08.MainControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:docking="http://schemas.actiprosoftware.com/winfx/xaml/docking"
	xmlns:editor="http://schemas.actiprosoftware.com/winfx/xaml/syntaxeditor"
    xmlns:sample="clr-namespace:ActiproSoftware.ProductSamples.SyntaxEditorSamples.QuickStart.GettingStarted08"
	xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared"
    >

	<docking:DockSite>
			
		<docking:SplitContainer Orientation="Vertical">
			
			<docking:Workspace>
				
				<DockPanel>
					<ToolBarTray Margin="0,0,0,5" DockPanel.Dock="Top">
						<ToolBar>
							<Button Command="editor:EditorCommands.CommentLines" ToolTip="Comment out the selected lines" CommandTarget="{Binding ElementName=editor}">
								<shared:DynamicImage Source="/Images/Icons/CommentLines16.png" Width="16" Height="16" Stretch="UniformToFill" />
							</Button>
							<Button Command="editor:EditorCommands.UncommentLines" ToolTip="Uncomment the selected lines" CommandTarget="{Binding ElementName=editor}">
								<shared:DynamicImage Source="/Images/Icons/UncommentLines16.png" Width="16" Height="16" Stretch="UniformToFill" />
							</Button>
						</ToolBar>
					</ToolBarTray>
					
					<!-- SyntaxEditor -->
					<editor:SyntaxEditor x:Name="editor" 
										 DocumentParseDataChanged="OnEditorDocumentParseDataChanged"
										 UserInterfaceUpdate="OnEditorUserInterfaceUpdate">
						<editor:EditorDocument xml:space="preserve">
							<editor:EditorDocument.Language>
								<sample:SimpleSyntaxLanguage />
							</editor:EditorDocument.Language><![CDATA[/*
	In this sample we built a SimpleContext class, which can provide language-specific data about a 
	certain offset.  The new SimpleContextFactory class is registered as a service on the language
	and is what is capable of creating SimpleContext objects.
	
	Context data is essential when starting to add features such as IntelliPrompt because you can
	request contextual data for a given offset and based on that data, you can alter what is 
	displayed.
	
	Although the context-related classes have been created in this step, they are not demoed yet.
	They will be used in the following steps.
*/

function Add(x, y) {
	return x + y;
}

function Increment(x) {
	return (x + 1);
}

function IncrementAndMultiply(x, y) {
	// This function calls another function
	var result;
	result = Increment(x);
	return result * y;
}
]]></editor:EditorDocument>

					</editor:SyntaxEditor>					
				</DockPanel>

			</docking:Workspace>

			<docking:ToolWindowContainer>
				<docking:ToolWindow Title="Error List" ImageSource="/Images/Icons/ErrorList16.png" CanClose="False" ContainerDockedSize="200,150">
					<ListView x:Name="errorListView" BorderThickness="0" MouseDoubleClick="OnErrorListViewDoubleClick">
						<ListView.View>
							<GridView>
								<GridViewColumn Header="Line" Width="40" DisplayMemberBinding="{Binding Path=PositionRange.StartPosition.DisplayLine}" />
								<GridViewColumn Header="Char" Width="40" DisplayMemberBinding="{Binding Path=PositionRange.StartPosition.DisplayCharacter}" />
								<GridViewColumn Header="Description" Width="300" DisplayMemberBinding="{Binding Path=Description}" />
							</GridView>
						</ListView.View>
					</ListView>
				</docking:ToolWindow>
			</docking:ToolWindowContainer>
		</docking:SplitContainer>
				
	</docking:DockSite>

</UserControl>
