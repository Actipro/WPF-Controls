namespace ActiproSoftware.ProductSamples.SyntaxEditorSamples.QuickStart.GettingStarted04d {
    using ActiproSoftware.Text.Parsing;
    using ActiproSoftware.Text.Parsing.Implementation;
    using System;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// Represents a function declaration.
    /// </summary>
    /// <remarks>
    /// This type was generated by the Actipro Language Designer tool v11.1.544.0 (http://www.actiprosoftware.com).
    /// Generated code is based on input created by Actipro Software LLC.
    /// Copyright (c) 2001-2021 Actipro Software LLC.  All rights reserved.
    /// </remarks>
    public partial class FunctionDeclaration : AstNodeBase {
        
        /// <summary>
        /// Gets the body.
        /// </summary>
        private BlockStatement bodyValue;
        
        /// <summary>
        /// Gets the name.
        /// </summary>
        private String nameValue;
        
        /// <summary>
        /// Gets the parameters.
        /// </summary>
        private IList<String> parametersValue;
        
        /// <summary>
        /// Gets the An integer value that identifies the type of AST node.
        /// </summary>
        /// <value>The An integer value that identifies the type of AST node.</value>
        public override Int32 Id {
            get {
                return SimpleAstNodeId.FunctionDeclaration;
            }
        }
        
        /// <summary>
        /// Gets or sets the body.
        /// </summary>
        /// <value>The body.</value>
        public BlockStatement Body {
            get {
                return this.bodyValue;
            }
            set {
                this.bodyValue = value;
            }
        }
        
        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>The name.</value>
        public String Name {
            get {
                return this.nameValue;
            }
            set {
                this.nameValue = value;
            }
        }
        
        /// <summary>
        /// Gets the parameters.
        /// </summary>
        /// <value>The parameters.</value>
        public IList<String> Parameters {
            get {
                if ((this.parametersValue == null)) {
                    this.parametersValue = new List<String>();
                }
                return this.parametersValue;
            }
        }
        
        /// <summary>
        /// Returns whether the <see cref="Parameters"/> collection property contains at least one item.
        /// </summary>
        /// <value><c>true</c> if there is at least one item in the collection; otherwise, <c>false</c>.</value>
        public Boolean HasParameters {
            get {
                if (((this.parametersValue != null) 
                            && (this.parametersValue.Count > 0))) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        /// <summary>
        /// Retrieves an <c>IEnumerator</c> object that can iterate the child <see cref="IAstNode"/> objects in this node.
        /// </summary>
        /// <returns>An <c>IEnumerator</c> object that can iterate the child <see cref="IAstNode"/> objects in this node.</returns>
        protected override IEnumerator<IAstNode> GetChildrenEnumerator() {
            IEnumerator<IAstNode> baseEnumerator = base.GetChildrenEnumerator();
            if ((baseEnumerator != null)) {
				while (baseEnumerator.MoveNext())
					yield return baseEnumerator.Current;
            }
            if ((this.bodyValue != null)) {
				yield return this.bodyValue;
            }
        }
    }
}
