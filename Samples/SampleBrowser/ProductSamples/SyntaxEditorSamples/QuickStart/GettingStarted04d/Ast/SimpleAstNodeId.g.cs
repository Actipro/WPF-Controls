namespace ActiproSoftware.ProductSamples.SyntaxEditorSamples.QuickStart.GettingStarted04d {
    using ActiproSoftware.Text.Parsing.Implementation;
    using System;
    using System.ComponentModel;
    using System.Reflection;
    
    
    /// <summary>
    /// Contains the AST node IDs for the <c>Simple</c> language.
    /// </summary>
    /// <remarks>
    /// This type was generated by the Actipro Language Designer tool v11.1.544.0 (http://www.actiprosoftware.com).
    /// Generated code is based on input created by Actipro Software LLC.
    /// Copyright (c) 2001-2021 Actipro Software LLC.  All rights reserved.
    /// </remarks>
    public partial class SimpleAstNodeId : AstNodeIdProviderBase {
        
        /// <summary>
        /// Gets the <c>AssignmentStatement</c> AST node ID.
        /// </summary>
        [DescriptionAttribute("Assignment statement")]
        public const Int32 AssignmentStatement = 5001;
        
        /// <summary>
        /// Gets the <c>BinaryOperatorExpression</c> AST node ID.
        /// </summary>
        [DescriptionAttribute("Binary operator expression")]
        public const Int32 BinaryOperatorExpression = 5002;
        
        /// <summary>
        /// Gets the <c>BlockStatement</c> AST node ID.
        /// </summary>
        [DescriptionAttribute("Block statement")]
        public const Int32 BlockStatement = 5003;
        
        /// <summary>
        /// Gets the <c>CompilationUnit</c> AST node ID.
        /// </summary>
        [DescriptionAttribute("Compilation unit")]
        public const Int32 CompilationUnit = 5000;
        
        /// <summary>
        /// Gets the <c>Expression</c> AST node ID.
        /// </summary>
        [DescriptionAttribute("Expression")]
        public const Int32 Expression = 5004;
        
        /// <summary>
        /// Gets the <c>FunctionAccessExpression</c> AST node ID.
        /// </summary>
        [DescriptionAttribute("Function access expression")]
        public const Int32 FunctionAccessExpression = 5005;
        
        /// <summary>
        /// Gets the <c>FunctionDeclaration</c> AST node ID.
        /// </summary>
        [DescriptionAttribute("Function declaration")]
        public const Int32 FunctionDeclaration = 5006;
        
        /// <summary>
        /// Gets the <c>LiteralExpression</c> AST node ID.
        /// </summary>
        [DescriptionAttribute("Literal expression")]
        public const Int32 LiteralExpression = 5007;
        
        /// <summary>
        /// Gets the <c>ParenthesizedExpression</c> AST node ID.
        /// </summary>
        [DescriptionAttribute("Parenthesized expression")]
        public const Int32 ParenthesizedExpression = 5008;
        
        /// <summary>
        /// Gets the <c>ReturnStatement</c> AST node ID.
        /// </summary>
        [DescriptionAttribute("Return statement")]
        public const Int32 ReturnStatement = 5009;
        
        /// <summary>
        /// Gets the <c>SimpleName</c> AST node ID.
        /// </summary>
        [DescriptionAttribute("Simple name")]
        public const Int32 SimpleName = 5010;
        
        /// <summary>
        /// Gets the <c>Statement</c> AST node ID.
        /// </summary>
        [DescriptionAttribute("Statement")]
        public const Int32 Statement = 5011;
        
        /// <summary>
        /// Gets the <c>VariableDeclarationStatement</c> AST node ID.
        /// </summary>
        [DescriptionAttribute("Variable declaration statement")]
        public const Int32 VariableDeclarationStatement = 5012;
        
        /// <summary>
        /// Gets the minimum AST node ID returned by this provider.
        /// </summary>
        /// <value>The minimum AST node ID returned by this provider.</value>
        public override Int32 MinId {
            get {
                return 5000;
            }
        }
        
        /// <summary>
        /// Gets the maximum AST node ID returned by this provider.
        /// </summary>
        /// <value>The maximum AST node ID returned by this provider.</value>
        public override Int32 MaxId {
            get {
                return 5012;
            }
        }
        
        /// <summary>
        /// Returns whether the specified ID value is valid for this AST node ID provider.
        /// </summary>
        /// <param name="id">The AST node ID to examine.</param>
        /// <returns><c>true</c> if the ID value is valid; otherwise, <c>false</c></returns>
        public override Boolean ContainsId(Int32 id) {
            return ((id >= MinId) 
                        && (id <= MaxId));
        }
        
        /// <summary>
        /// Returns the actual string representation for the specified AST node ID.
        /// </summary>
        /// <param name="id">The AST node ID to examine.</param>
        /// <returns>The actual string representation for the specified AST node ID.</returns>
        public override String GetDescription(Int32 id) {
            FieldInfo[] fields = typeof(SimpleAstNodeId).GetFields((BindingFlags.Public | BindingFlags.Static));
            for (Int32 index = 0; (index < fields.Length); index = (index + 1)) {
                FieldInfo field = fields[index];
                if (id.Equals(field.GetValue(null))) {
                    Object[] customAttributes = field.GetCustomAttributes(typeof(DescriptionAttribute), false);
                    if (((customAttributes != null) 
                                && (customAttributes.Length > 0))) {
                        return ((DescriptionAttribute)(customAttributes[0])).Description;
                    }
                    else {
                        return field.Name;
                    }
                }
            }
            return null;
        }
        
        /// <summary>
        /// Returns the string-based key for the specified AST node ID.
        /// </summary>
        /// <param name="id">The AST node ID to examine.</param>
        /// <returns>The string-based key for the specified AST node ID.</returns>
        public override String GetKey(Int32 id) {
            FieldInfo[] fields = typeof(SimpleAstNodeId).GetFields((BindingFlags.Public | BindingFlags.Static));
            for (Int32 index = 0; (index < fields.Length); index = (index + 1)) {
                FieldInfo field = fields[index];
                if (id.Equals(field.GetValue(null))) {
                    return field.Name;
                }
            }
            return null;
        }
    }
}
