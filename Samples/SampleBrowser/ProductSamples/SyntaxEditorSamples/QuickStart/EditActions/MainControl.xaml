<UserControl x:Class="ActiproSoftware.ProductSamples.SyntaxEditorSamples.QuickStart.EditActions.MainControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared" 
	xmlns:editor="http://schemas.actiprosoftware.com/winfx/xaml/syntaxeditor" 
	xmlns:themes="http://schemas.actiprosoftware.com/winfx/xaml/themes" 
    >
	
	<DockPanel>
		<shared:PixelSnapper DockPanel.Dock="Right">
			<DockPanel Margin="20" MaxWidth="300">
				<shared:PixelSnapper DockPanel.Dock="Top">
					<StackPanel>
						<TextBlock FontWeight="Bold" TextWrapping="Wrap">Custom Edit Action:</TextBlock>
						<TextBlock Margin="0,3,0,0" TextWrapping="Wrap">This sample includes source code for a custom edit action that inserts &lt;custom&gt; tags around the selected text.  Use these buttons to work with the custom edit action.</TextBlock>
						<WrapPanel Margin="0,3,0,0">
							<Button Margin="0,0,3,0" Click="OnExecuteCustomAction" Content="Execute Action" />
							<Button Margin="0,0,3,0" Click="OnBindCustomAction" Content="Bind to Ctrl+P" />
							<Button Click="OnUnbindCustomAction" Content="Unbind Ctrl+P" />
						</WrapPanel>
						
						<TextBlock Margin="0,15,0,0" FontWeight="Bold" TextWrapping="Wrap">Built-In Edit Actions (double-click to execute):</TextBlock>
					</StackPanel>
				</shared:PixelSnapper>
				<ListView x:Name="editActionsListView" Margin="0,3,0,0" MouseDoubleClick="OnEditActionListViewDoubleClick">
					<ListView.GroupStyle>
						<GroupStyle>
							<GroupStyle.ContainerStyle>
								<Style TargetType="{x:Type GroupItem}">
									<Setter Property="Template">
										<Setter.Value>
											<ControlTemplate TargetType="{x:Type GroupItem}">
												<DockPanel>
													<Border DockPanel.Dock="Top" Padding="8,3" Background="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerBackgroundLowBrushKey}}">
														<TextBlock FontWeight="Bold" Text="{Binding Name}" />
													</Border>
													<ItemsPresenter />
												</DockPanel>
											</ControlTemplate>
										</Setter.Value>
									</Setter>
								</Style>
							</GroupStyle.ContainerStyle>
						</GroupStyle>
					</ListView.GroupStyle>
					<ListView.View>
						<GridView>
							<GridViewColumn Header="Name" Width="140" DisplayMemberBinding="{Binding Path=Name}" />
							<GridViewColumn Header="Key" DisplayMemberBinding="{Binding Path=Key}" />
						</GridView>
					</ListView.View>
				</ListView>
			</DockPanel>
		</shared:PixelSnapper>

		<editor:SyntaxEditor x:Name="editor">
			<editor:EditorDocument xml:space="preserve"><![CDATA[SyntaxEditor uses the WPF command pattern for implementing actions that can be bound
to key sequences.

For instance, the Ctrl+Del key will execute the DeleteToNextWordAction, which 
deletes the text from the current caret offset to the start of the next word.

Most of the built-in edit actions are automatically bound to keys for each 
SyntaxEditor when it is created.  However you can change those bindings to whatever
you'd like by altering the SyntaxEditor's InputBindings collection.

The built-in edit actions are listed to the right.  The ones with a Key show
the default key bindings.  The ones withouta Key by default are not bound to a key
sequence but can easily be bound if desired.  Double-click an edit action in the list
to execute it.

Custom edit actions can also be written and bound to key sequences.
]]></editor:EditorDocument>
		</editor:SyntaxEditor>
	</DockPanel>

</UserControl>
