<UserControl 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared" 
	xmlns:editor="http://schemas.actiprosoftware.com/winfx/xaml/syntaxeditor" 
	xmlns:sample="clr-namespace:ActiproSoftware.ProductSamples.SyntaxEditorSamples.QuickStart.ClassificationLineStart"
    >
    
	<!-- SyntaxEditor -->
	<editor:SyntaxEditor WordWrapMode="Word" AreWordWrapGlyphsVisible="True">
		<editor:EditorDocument xml:space="preserve">
			<editor:EditorDocument.Language>
				<sample:CustomSyntaxLanguage />
			</editor:EditorDocument.Language><![CDATA[This QuickStart shows how you can create a custom classification tagger, which can be used to drive syntax highlighting, even without the use of a language lexer.  This mechanism can also be combined with a language's lexer and token tagger so that custom classifications can override those from the language.  A demo of that is in the "Classification - Layered" sample.
			
In this sample we have implemented an ITagger that looks for the text "Error:" at the start of a line.  If it finds this, it will render the line in red.  We also will look for lines starting with "---" and will render them in green.  This could be used for a log file output viewer.

However you aren't limited to entire lines.  You could choose to highlight certain individual words, characters, or any other type of span.

Let's pretend the following is log file output, so that we can see the filter in action:

--- START OF LOG ---
Opening file "c:\data.txt" for input...
Error: Unable to obtain read access to file... operation aborted!
Processing terminated.
--- END OF LOG ---

All of this works real-time too.  Try modifying the "Error:" or "---" at the start of the log file output lines to see them update accordingly.

This sample also shows another feature.  Normally syntax highlighting looks in the AmbientHighlightingStyleRegistry to map classification types (provided by a classification tagger) to related highlighting styles.  However you can optionally use a custom IHighlightingStyleRegistry if you don't wish to use AmbientHighlightingStyleRegistry.  AmbientHighlightingStyleRegistry is generally recommended for use in most scenarios though.]]></editor:EditorDocument>

	</editor:SyntaxEditor>

</UserControl>
