<UserControl x:Class="ActiproSoftware.ProductSamples.SyntaxEditorSamples.QuickStart.GettingStarted04a.MainControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:docking="http://schemas.actiprosoftware.com/winfx/xaml/docking"
	xmlns:editor="http://schemas.actiprosoftware.com/winfx/xaml/syntaxeditor"
	xmlns:themes="http://schemas.actiprosoftware.com/winfx/xaml/themes"
    xmlns:sample="clr-namespace:ActiproSoftware.ProductSamples.SyntaxEditorSamples.QuickStart.GettingStarted04a"
    >

	<docking:DockSite>
		<docking:SplitContainer>
			
			<docking:SplitContainer Orientation="Vertical">
			
				<docking:Workspace Background="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerBackgroundLowBrushKey}}">
					
					<!-- SyntaxEditor -->
					<editor:SyntaxEditor x:Name="editor" DocumentParseDataChanged="OnEditorDocumentParseDataChanged">
						<editor:EditorDocument xml:space="preserve">
							<editor:EditorDocument.Language>
								<sample:SimpleSyntaxLanguage />
							</editor:EditorDocument.Language><![CDATA[/*
	In this sample we've made a grammar-based parser using the 
	Actipro LL(*) Parser Framework, included with SyntaxEditor.
	This first iteration of the parser builds a complete AST of
	the document and reports parse errors.  Grammar, token
	reader, and parser classes were added.  See the LL(*)
	Parser Framework documentation for details on what all
	these mean and how to create them.
	
	The Document Outline tool window shows the AST that was
	constructed by the parser.  The EBNF tool window shows
	the EBNF representation of the parser.  The Error List
	tool window shows a list of any parse errors that were
	found.  Double-click an error to jump to its location.
	Change the code below to see these update.
	
	This first parser iteration uses default tree construction
	so the AST is extemely verbose (it includes nodes for
	everything in the document).  Also it doesn't yet handle
	error scenarios.  If you change code below to cause a 
	parse error, you'll see that the AST shown in the
	Document Outline tool window breaks down.
	
	The next two iterations of the parser will update the
	grammar to create a concise AST and have robust error
	handling.
*/

function Add(x, y) {
	return x + y;
}

function Increment(x) {
	return (x + 1);
}

function IncrementAndMultiply(x, y) {
	// This function calls another function
	var result;
	result = Increment(x);
	return result * y;
}
]]></editor:EditorDocument>

					</editor:SyntaxEditor>

				</docking:Workspace>

				<docking:ToolWindowContainer>
					<docking:ToolWindow Title="Error List" ImageSource="/Images/Icons/ErrorList16.png" CanClose="False" ContainerDockedSize="200,150">
						<ListView x:Name="errorListView" BorderThickness="0" MouseDoubleClick="OnErrorListViewDoubleClick">
							<ListView.View>
								<GridView>
									<GridViewColumn Header="Line" Width="40" DisplayMemberBinding="{Binding Path=PositionRange.StartPosition.DisplayLine}" />
									<GridViewColumn Header="Char" Width="40" DisplayMemberBinding="{Binding Path=PositionRange.StartPosition.DisplayCharacter}" />
									<GridViewColumn Header="Description" Width="300" DisplayMemberBinding="{Binding Path=Description}" />
								</GridView>
							</ListView.View>
						</ListView>
					</docking:ToolWindow>
				</docking:ToolWindowContainer>
			</docking:SplitContainer>
				
			<docking:ToolWindowContainer>
				<docking:ToolWindow Title="Document Outline" ImageSource="/Images/Icons/DocumentOutline16.png" CanClose="False" ContainerDockedSize="230,200">
					<editor:SyntaxEditor x:Name="astOutputEditor" 
											BorderThickness="0" IsOutliningMarginVisible="False" IsSelectionMarginVisible="False" CanSplitHorizontally="False">
						<editor:EditorDocument IsReadOnly="true" />
					</editor:SyntaxEditor>
				</docking:ToolWindow>
				<docking:ToolWindow Title="EBNF" ImageSource="/Images/Icons/CallStack16.png" CanClose="False" ContainerDockedSize="230,200">
					<editor:SyntaxEditor x:Name="ebnfEditor" 
											BorderThickness="0" IsOutliningMarginVisible="False" IsSelectionMarginVisible="False" CanSplitHorizontally="False">
						<editor:EditorDocument IsReadOnly="true" />
					</editor:SyntaxEditor>
				</docking:ToolWindow>
			</docking:ToolWindowContainer>
					
		</docking:SplitContainer>
	</docking:DockSite>

</UserControl>
