<UserControl x:Class="ActiproSoftware.ProductSamples.SyntaxEditorSamples.QuickStart.CodeOutliningCollapsedText.MainControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:system="clr-namespace:System;assembly=mscorlib"
	xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared" 
	xmlns:editor="http://schemas.actiprosoftware.com/winfx/xaml/syntaxeditor" 
	xmlns:editorOutlining="clr-namespace:ActiproSoftware.Windows.Controls.SyntaxEditor.Outlining;assembly=ActiproSoftware.SyntaxEditor.Wpf"
	xmlns:sample="clr-namespace:ActiproSoftware.ProductSamples.SyntaxEditorSamples.QuickStart.CodeOutliningCollapsedText"
    >
	<UserControl.Resources>

		<ObjectDataProvider x:Key="OutliningModeObjectDataProvider" MethodName="GetValues" ObjectType="{x:Type system:Enum}">
			<ObjectDataProvider.MethodParameters>
				<x:Type TypeName="editorOutlining:OutliningMode"/>
			</ObjectDataProvider.MethodParameters>
		</ObjectDataProvider>
		
	</UserControl.Resources>
    
	<DockPanel>
		<StackPanel DockPanel.Dock="Top" Margin="20,10" Orientation="Horizontal">
			<Button Click="OnOpenButtonClick">
				<StackPanel Orientation="Horizontal">
					<shared:DynamicImage Width="16" Height="16" Stretch="Uniform" Source="/Images/Icons/Open16.png" />
					<TextBlock Margin="3,0,0,0" Text="Open" VerticalAlignment="Center" />
				</StackPanel>
			</Button>
			<shared:PopupButton Margin="7,0,0,0" DisplayMode="Merged" Content="Outlining" PopupMenuDataContext="{Binding ElementName=editor}">
				<shared:PopupButton.PopupMenu>
					<ContextMenu>
						<MenuItem Command="editor:EditorCommands.CollapseToDefinitions" CommandTarget="{Binding}" />
						<MenuItem Command="editor:EditorCommands.ExpandAllOutlining" CommandTarget="{Binding}" />
						<MenuItem Command="editor:EditorCommands.HideSelection" CommandTarget="{Binding}" />
						<MenuItem Command="editor:EditorCommands.ToggleOutliningExpansion" CommandTarget="{Binding}" />
						<MenuItem Command="editor:EditorCommands.ToggleAllOutliningExpansion" CommandTarget="{Binding}" />
						<MenuItem Command="editor:EditorCommands.StopOutlining" CommandTarget="{Binding}" />
						<MenuItem Command="editor:EditorCommands.StopHidingCurrent" CommandTarget="{Binding}" />
						<MenuItem Command="editor:EditorCommands.StartAutomaticOutlining" CommandTarget="{Binding}" />
						<MenuItem Command="editor:EditorCommands.ApplyDefaultOutliningExpansion" CommandTarget="{Binding}" />
					</ContextMenu>
				</shared:PopupButton.PopupMenu>
			</shared:PopupButton>
			<TextBlock Margin="50,0,0,0" VerticalAlignment="Center" Text="Allowed Mode: " />
			<ComboBox 
				SelectedValue="{Binding ElementName=document, Path=OutliningMode}" 			 
				ItemsSource="{Binding Source={StaticResource OutliningModeObjectDataProvider}}" />
			<TextBlock Margin="22,0,0,0" VerticalAlignment="Center" Text="Active Mode: " />
			<TextBlock VerticalAlignment="Center" Text="{Binding ElementName=document, Path=OutliningManager.(editorOutlining:IOutliningManager.ActiveMode)}" FontWeight="Bold" />
			<CheckBox Margin="50,0,0,0" Content="Margin hover highlights enabled" IsChecked="{Binding ElementName=editor, Path=IsCollapsibleRegionHighlightingEnabled}" VerticalAlignment="Center" />
		</StackPanel>
		
		<!-- SyntaxEditor -->
		<editor:SyntaxEditor x:Name="editor" IsLineNumberMarginVisible="True">
			<editor:EditorDocument x:Name="document" xml:space="preserve">
				<editor:EditorDocument.Language>
					<sample:JavascriptSyntaxLanguage />
				</editor:EditorDocument.Language><![CDATA[// This QuickStart shows how the text displayed for a collapsed
// node can be customized based on the node's inner content

var labelString = 'Screen pixel count: ';

/* This function writes the number of pixels
   in the screen to the document */
function displayScreenPixelCount(screenWidth, screenHeight) {
	// Write a paragraph with the screen's pixel count
	document.write("<p>" + labelString);

	var pixelCount = product(screenWidth, screenHeight);
	document.write(pixelCount);

	if (pixelCount <= 64000) {
		document.write(" (small)");
	}
	else {
		document.write(" (large)");
	}

	document.write("</p>");
}

/* This function accepts two parameters and
   returns their product */
function product(x, y) {
	return x * y;
}
]]></editor:EditorDocument>

		</editor:SyntaxEditor>

	</DockPanel>

</UserControl>
