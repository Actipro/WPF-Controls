<UserControl x:Class="ActiproSoftware.ProductSamples.SyntaxEditorSamples.QuickStart.GettingStarted06.MainControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:docking="http://schemas.actiprosoftware.com/winfx/xaml/docking"
	xmlns:editor="http://schemas.actiprosoftware.com/winfx/xaml/syntaxeditor"
	xmlns:themes="http://schemas.actiprosoftware.com/winfx/xaml/themes"
    xmlns:sample="clr-namespace:ActiproSoftware.ProductSamples.SyntaxEditorSamples.QuickStart.GettingStarted06"
    >

	<docking:DockSite>
			
		<docking:SplitContainer Orientation="Vertical">
			
			<docking:Workspace Background="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerBackgroundLowBrushKey}}">
					
				<!-- SyntaxEditor -->
				<editor:SyntaxEditor x:Name="editor" 
									 DocumentParseDataChanged="OnEditorDocumentParseDataChanged"
									 UserInterfaceUpdate="OnEditorUserInterfaceUpdate">
					<editor:EditorDocument xml:space="preserve">
						<editor:EditorDocument.Language>
							<sample:SimpleSyntaxLanguage />
						</editor:EditorDocument.Language><![CDATA[/*
	In this sample we've added code outlining to our editor based on the AST that was
	generated by our parser.
	
	This feature addition involves creating an IOutliner that indicates we are basing
	code outlining on parse data.  It harnesses an RangeOutliningSourceBase-based
	outlining source that can construct outlining nodes using AST data for the
	Simple language.
	
	We also registered a built-in service on our language that shows IntelliPrompt
	quick info tips when the mouse hovers over collapsed outlining nodes.
*/

function Add(x, y) {
	return x + y;
}

function Increment(x) {
	return (x + 1);
}

function IncrementAndMultiply(x, y) {
	// This function calls another function
	var result;
	result = Increment(x);
	return result * y;
}
]]></editor:EditorDocument>

				</editor:SyntaxEditor>

			</docking:Workspace>

			<docking:ToolWindowContainer>
				<docking:ToolWindow Title="Error List" ImageSource="/Images/Icons/ErrorList16.png" CanClose="False" ContainerDockedSize="200,150">
					<ListView x:Name="errorListView" BorderThickness="0" MouseDoubleClick="OnErrorListViewDoubleClick">
						<ListView.View>
							<GridView>
								<GridViewColumn Header="Line" Width="40" DisplayMemberBinding="{Binding Path=PositionRange.StartPosition.DisplayLine}" />
								<GridViewColumn Header="Char" Width="40" DisplayMemberBinding="{Binding Path=PositionRange.StartPosition.DisplayCharacter}" />
								<GridViewColumn Header="Description" Width="300" DisplayMemberBinding="{Binding Path=Description}" />
							</GridView>
						</ListView.View>
					</ListView>
				</docking:ToolWindow>
			</docking:ToolWindowContainer>
		</docking:SplitContainer>
				
	</docking:DockSite>

</UserControl>
