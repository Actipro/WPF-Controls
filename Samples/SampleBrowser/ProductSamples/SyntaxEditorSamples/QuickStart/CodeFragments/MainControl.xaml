<sampleBrowser:ProductItemControl x:Class="ActiproSoftware.ProductSamples.SyntaxEditorSamples.QuickStart.CodeFragments.MainControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:editor="http://schemas.actiprosoftware.com/winfx/xaml/syntaxeditor"
	xmlns:sampleBrowser="clr-namespace:ActiproSoftware.SampleBrowser"
    >
	
	<sampleBrowser:ProductItemControl.SideBarContent>
		<StackPanel>

			<Expander Style="{StaticResource SampleHeaderOptionsExpanderStyle}">
				<ToggleButton Content="Toggle Edit Mode" Style="{StaticResource SampleOptionsActionButtonStyle}" Click="OnToggleEditModeButtonClick" />
			</Expander>

			<Expander Style="{StaticResource SampleHeaderDescriptionExpanderStyle}">
				<TextBlock Style="{StaticResource SampleHeaderDescriptionTextBlockStyle}">
					SyntaxEditor fully supports the editing of code fragments with languages that have parsers used to support IntelliPrompt, such as the .NET Languages Add-on's C# language (sold separately), demoed here.
					<LineBreak /><LineBreak />
					This sample shows how header and footer text can be set to a document with the union of the header/fragment/footer text being sent to the language's parser.  
					<LineBreak /><LineBreak />
					Code in the "header" editor is prepended and code in the "footer" editor is postpended to the "fragment" editor's text for parsing purposes.
					Normally, the end user would only see and edit the code in the "fragment" editor, but this sample includes the "header" and "footer" editors as well,
					for the purposes of demonstrating how code fragment editing works.
					<LineBreak /><LineBreak />
					Use the "Toggle Edit Mode" button to toggle between editing the header/footer text and the fragment text.
				</TextBlock>
			</Expander>
			
		</StackPanel>
	</sampleBrowser:ProductItemControl.SideBarContent>

	<DockPanel Style="{StaticResource SamplePanelWideStyle}">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition Height="2*" />
				<RowDefinition Height="Auto" />
				<RowDefinition Height="2.3*" />
				<RowDefinition Height="Auto" />
				<RowDefinition Height="0.8*" />
			</Grid.RowDefinitions>
		
			<TextBlock Grid.Row="2" Margin="0,20,0,3" Text="FRAGMENT CODE" Style="{StaticResource SampleSectionHeadingTextBlockStyle}" />
			<editor:SyntaxEditor x:Name="fragmentEditor" Grid.Row="3" IsLineNumberMarginVisible="True" IsOutliningMarginVisible="False" CanSplitHorizontally="False">
				<editor:EditorDocument xml:space="preserve"><![CDATA[// If there is at least one item in the list...
if (list.Count > 0) {
	// Write it to the Console
	var firstItem = list.FirstOrDefault();
	Debug.WriteLine(firstItem
}

// NOTE: Edit this document and see how syntax error reporting and
//       automated IntelliPrompt features such as completion 
//       lists, quick info, and parameter info fully work.

]]></editor:EditorDocument>
			</editor:SyntaxEditor>
		
			<TextBlock Margin="0,0,0,3" Text="HEADER CODE" Style="{StaticResource SampleSectionHeadingTextBlockStyle}" />
			<editor:SyntaxEditor x:Name="headerEditor" Grid.Row="1" IsOutliningMarginVisible="False" CanSplitHorizontally="False">
				<editor:EditorDocument IsReadOnly="True" xml:space="preserve"><![CDATA[using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace SyntaxEditor.CodeFragments {
	/// <summary>A class to demonstrate fragment editing.</summary>
	public class MyClass {
		/// <summary>Writes the first item to the console.</summary>
		/// <param name="list">The list to examine.</param>
		public void WriteFirstItem(List<int> list) {
]]></editor:EditorDocument>
			</editor:SyntaxEditor>
			
			<TextBlock Grid.Row="4" Margin="0,20,0,3" Text="FOOTER CODE" Style="{StaticResource SampleSectionHeadingTextBlockStyle}" />
			<editor:SyntaxEditor x:Name="footerEditor" Grid.Row="5" IsOutliningMarginVisible="False" CanSplitHorizontally="False">
				<editor:EditorDocument IsReadOnly="True" xml:space="preserve"><![CDATA[		}
	}
}]]></editor:EditorDocument>
			</editor:SyntaxEditor>
			
		</Grid>
	</DockPanel>

</sampleBrowser:ProductItemControl>
