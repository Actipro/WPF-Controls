<sampleBrowser:ProductItemControl x:Class="ActiproSoftware.ProductSamples.SyntaxEditorSamples.Demo.PythonAddonPythonEditor.MainControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared" 
	xmlns:docking="http://schemas.actiprosoftware.com/winfx/xaml/docking"
	xmlns:editor="http://schemas.actiprosoftware.com/winfx/xaml/syntaxeditor"
	xmlns:themes="http://schemas.actiprosoftware.com/winfx/xaml/themes"
	xmlns:sampleBrowser="clr-namespace:ActiproSoftware.SampleBrowser"
	FocusManager.FocusedElement="{Binding ElementName=codeEditor}"
    >
	
	<DockPanel>
		
		<!-- Toolbar -->
		<shared:PixelSnapper DockPanel.Dock="Top" Margin="0,5,0,0">
			<ToolBarTray>
				<ToolBar>
					<ComboBox x:Name="versionComboBox" SelectionChanged="OnVersionComboBoxSelectionChanged">
						<ComboBoxItem>Python v3.x</ComboBoxItem>
						<ComboBoxItem>Python v2.x</ComboBoxItem>
					</ComboBox>
					<Separator />
					<Button Click="OnOpenStandardLibraryButtonClick">
						<TextBlock Margin="7,0,7,0" Text="Locate Standard Lib" VerticalAlignment="Center" />
					</Button>
					<Separator />
					<Button Click="OnNewFileButtonClick">
						<StackPanel Orientation="Horizontal">
							<shared:DynamicImage Source="/Images/Icons/New16.png" Width="16" Height="16" Stretch="UniformToFill" VerticalAlignment="Center" />
							<TextBlock Margin="2,0,7,0" Text="New Document" VerticalAlignment="Center" />
						</StackPanel>
					</Button>
					<Button Click="OnOpenFileButtonClick">
						<StackPanel Orientation="Horizontal">
							<shared:DynamicImage Source="/Images/Icons/Open16.png" Width="16" Height="16" Stretch="UniformToFill" VerticalAlignment="Center" />
							<TextBlock Margin="2,0,7,0" Text="Open Document" VerticalAlignment="Center" />
						</StackPanel>
					</Button>
					<Separator />
					<Button Command="editor:EditorCommands.CommentLines" ToolTip="Comment out the selected lines" CommandTarget="{Binding ElementName=codeEditor}">
						<shared:DynamicImage Source="/Images/Icons/CommentLines16.png" Width="16" Height="16" Stretch="UniformToFill" />
					</Button>
					<Button Command="editor:EditorCommands.UncommentLines" ToolTip="Uncomment the selected lines" CommandTarget="{Binding ElementName=codeEditor}">
						<shared:DynamicImage Source="/Images/Icons/UncommentLines16.png" Width="16" Height="16" Stretch="UniformToFill" />
					</Button>
					<Separator />
					<Button Command="editor:EditorCommands.FormatDocument" ToolTip="Format Document" CommandTarget="{Binding ElementName=codeEditor}">
						<shared:DynamicImage Source="/Images/Icons/FormatDocument16.png" Width="16" Height="16" Stretch="UniformToFill" />
					</Button>
					<Button Command="editor:EditorCommands.FormatSelection" ToolTip="Format Selection" CommandTarget="{Binding ElementName=codeEditor}">
						<shared:DynamicImage Source="/Images/Icons/FormatSelection16.png" Width="16" Height="16" Stretch="UniformToFill" />
					</Button>
				</ToolBar>
			</ToolBarTray>
		</shared:PixelSnapper>
		
		<!-- Statusbar -->
		<shared:PixelSnapper DockPanel.Dock="Bottom">
			<StatusBar FocusManager.IsFocusScope="True">
				<StatusBar.ItemsPanel>
					<ItemsPanelTemplate>
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" MinWidth="150" />
							</Grid.ColumnDefinitions>
						</Grid>
					</ItemsPanelTemplate>
				</StatusBar.ItemsPanel>

				<StatusBarItem x:Name="messagePanel" Margin="7,0,7,0">Ready</StatusBarItem>

				<StatusBarItem Grid.Column="1">
					<StackPanel Orientation="Horizontal">
						<TextBlock x:Name="linePanel" MinWidth="40" Margin="7,0,7,0" VerticalAlignment="Center" Text="Ln 1" />
						<TextBlock x:Name="columnPanel" MinWidth="40" Margin="7,0,7,0" VerticalAlignment="Center" Text="Col 1" />
						<TextBlock x:Name="characterPanel" MinWidth="40" Margin="7,0,7,0" VerticalAlignment="Center" Text="Ch 1" />
					</StackPanel>
				</StatusBarItem>

			</StatusBar>
		</shared:PixelSnapper>

		<docking:DockSite>
			<docking:SplitContainer>
				
				<docking:SplitContainer Orientation="Vertical">
					
					<docking:Workspace Background="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerBackgroundLowBrushKey}}">
						
						<DockPanel>
							<editor:NavigableSymbolSelector DockPanel.Dock="Top" Margin="0,0,0,1" SyntaxEditor="{Binding ElementName=codeEditor}" AreMemberSymbolsSupported="False" />
						
							<editor:SyntaxEditor x:Name="codeEditor" 
													IsLineNumberMarginVisible="True"
													DocumentParseDataChanged="OnCodeEditorDocumentParseDataChanged" 
													UserInterfaceUpdate="OnCodeEditorUserInterfaceUpdate"
													ViewSelectionChanged="OnCodeEditorViewSelectionChanged">
								<editor:EditorDocument xml:space="preserve" FileName="mymodule.py" TabSize="4" AutoConvertTabsToSpaces="True"><![CDATA[# Advanced Python code editing for your end users with the 
# Python Language Add-on for Actipro SyntaxEditor.
#
# Both v3.x and v2.x are supported.  Select the version from the
# ComboBox above in the toolbar.
#
# Next, click the 'Locate Standard Lib' button and browse to any
# .py file in your Python standard library's Lib folder so that
# the resolver knows where the library is located and can provide
# related IntelliPrompt.  This feature requires a desktop app.
#
# Edit this document to see background parsing update automatic 
# outlining, the document outline (AST), syntax errors,
# and automated IntelliPrompt features.

class FibTest:
    def __init__(self, count):
        if count <= 0:
            raise ValueError("'count' must be larger than zero.")
        self.count = count

    def get_series(self, can_reverse=False):
        """
        Create a Fibonacci series, optionally reverse it, and
        return a result string.
        """
        series = self.fib(self.count)
        if can_reverse:
            series.reverse()
        return 'Fibonacci series up to ' + str(self.count) + \
               ': ' + str(series)

    @staticmethod
    def fib(n):
        """
        Generate a Fibonacci series up to n.
        """
        result = []
        a, b = 0, 1
        while b < n:
            result.append(b)    # add to the list
            a, b = b, a + b
        return result
								
# This syntax language implementation is part of the Python Language
# Add-on for SyntaxEditor, which is optional and sold separately 
# from SyntaxEditor and containing bundles.
]]></editor:EditorDocument>
							</editor:SyntaxEditor>
						</DockPanel>

					</docking:Workspace>
				
					<docking:ToolWindowContainer>
						<docking:ToolWindow Title="Error List" ImageSource="/Images/Icons/ErrorList16.png" CanClose="False" ContainerDockedSize="200,150">
							<ListView x:Name="errorListView" BorderThickness="0" MouseDoubleClick="OnErrorListViewDoubleClick">
								<ListView.View>
									<GridView>
										<GridViewColumn Header="Line" Width="40" DisplayMemberBinding="{Binding Path=PositionRange.StartPosition.DisplayLine}" />
										<GridViewColumn Header="Char" Width="40" DisplayMemberBinding="{Binding Path=PositionRange.StartPosition.DisplayCharacter}" />
										<GridViewColumn Header="Description" Width="300" DisplayMemberBinding="{Binding Path=Description}" />
									</GridView>
								</ListView.View>
							</ListView>
						</docking:ToolWindow>
					</docking:ToolWindowContainer>
				</docking:SplitContainer>
				
				<docking:ToolWindowContainer>
					<docking:ToolWindow Title="Document Outline" ImageSource="/Images/Icons/DocumentOutline16.png" CanClose="False">
						<editor:SyntaxEditor x:Name="astOutputEditor"
											 BorderThickness="0" IsOutliningMarginVisible="False" IsSelectionMarginVisible="False" CanSplitHorizontally="False">
							<editor:EditorDocument IsReadOnly="true" TabSize="2" />
						</editor:SyntaxEditor>
					</docking:ToolWindow>
				</docking:ToolWindowContainer>
				
			</docking:SplitContainer>
		</docking:DockSite>
		
	</DockPanel>

</sampleBrowser:ProductItemControl>
