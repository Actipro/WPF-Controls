<?xml version="1.0" encoding="utf-8"?>
<!--

Actipro Syntax Language Definition (.langdef)
  For use with Actipro SyntaxEditor and related products.
  http://www.actiprosoftware.com

'CSS' language created by Actipro Software LLC.
  Copyright (c) 2001-2024 Actipro Software LLC.  All rights reserved.

-->
<LanguageDefinition LanguageKey="Css" LanguageDescription="CSS" Creator="Actipro Software LLC" Copyright="Copyright (c) 2001-2024 Actipro Software LLC.  All rights reserved." xmlns="http://schemas.actiprosoftware.com/langdef/1.0">
	<!-- Classification types -->
	<LanguageDefinition.ClassificationTypes>
		<ClassificationType Key="CssComment" Description="CSS Comment" DefaultStyle="#FF008000" DarkStyle="#FF57A64A" />
		<ClassificationType Key="CssPropertyName" Description="CSS Property Name" DefaultStyle="#FFFF0000" DarkStyle="#FF9CDCFE" />
		<ClassificationType Key="CssPropertyValue" Description="CSS Property Value" DefaultStyle="#FF0000FF" DarkStyle="#FFC8C8C8" />
		<ClassificationType Key="CssSelector" Description="CSS Selector" DefaultStyle="#FF800000" DarkStyle="#FFD7BA7D" />
	</LanguageDefinition.ClassificationTypes>
	<!-- Lexer -->
	<LanguageDefinition.Lexer>
		<DynamicLexer>
			<DynamicLexer.Macros>
				<Macro Key="Word" Pattern="[a-zA-Z_0-9\-]" />
				<Macro Key="NonWord" Pattern="[^a-zA-Z_0-9\-]" />
			</DynamicLexer.Macros>
			<!-- Default state -->
			<State Id="1" Key="Default" DefaultTokenId="1" DefaultTokenKey="SelectorText" DefaultClassificationTypeKey="CssSelector">
				<State.ChildStates>
					<StateRef Key="MediaQuery" />
					<StateRef Key="Property" />
					<StateRef Key="Comment" />
				</State.ChildStates>
				<RegexPatternGroup TokenId="2" TokenKey="Whitespace" Pattern="{Whitespace}+" />
				<RegexPatternGroup TokenId="3" TokenKey="LineTerminator" Pattern="{LineTerminator}" />
				<RegexPatternGroup TokenId="1" TokenKey="SelectorText" Pattern="{Alpha}({Word})*" />
			</State>
			<!-- MediaQuery state -->
			<State Id="2" Key="MediaQuery" DefaultTokenId="4" DefaultTokenKey="MediaQueryText">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<RegexPatternGroup TokenId="4" TokenKey="MediaQueryText" ClassificationTypeKey="CssSelector" Pattern="@media [^\{]*" LookAheadPattern="{LineTerminatorWhitespace}* \{" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenId="5" TokenKey="MediaQueryEndDelimiter" Pattern="}" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<State.ChildStates>
					<StateRef Key="MediaQueryContent" />
				</State.ChildStates>
			</State>
			<!-- MediaQueryContent state -->
			<State Id="3" Key="MediaQueryContent" DefaultTokenId="1" DefaultTokenKey="SelectorText" DefaultClassificationTypeKey="CssSelector">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="6" TokenKey="MediaQueryStartDelimiter" ClassificationTypeKey="PlainText" Pattern="{" />
						</Scope.StartPatternGroup>
					</Scope>
				</State.Scopes>
				<State.ChildStates>
					<StateRef Key="MediaQuery" />
					<StateRef Key="Property" />
					<StateRef Key="Comment" />
				</State.ChildStates>
				<RegexPatternGroup TokenId="2" TokenKey="Whitespace" Pattern="{Whitespace}+" />
				<RegexPatternGroup TokenId="3" TokenKey="LineTerminator" Pattern="{LineTerminator}" />
				<RegexPatternGroup TokenId="1" TokenKey="SelectorText" Pattern="{Alpha}({Word})*" />
			</State>
			<!-- Property state -->
			<State Id="4" Key="Property" DefaultTokenId="7" DefaultTokenKey="PropertyNameText">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="8" TokenKey="PropertyStart" Pattern="{" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenId="9" TokenKey="PropertyEnd" Pattern="}" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<State.ChildStates>
					<StateRef Key="PropertyValue" />
					<StateRef Key="Comment" />
				</State.ChildStates>
				<RegexPatternGroup TokenId="10" TokenKey="PropertyNameWhitespace" Pattern="{Whitespace}+" />
				<RegexPatternGroup TokenId="11" TokenKey="PropertyNameLineTerminator" Pattern="{LineTerminator}" />
				<RegexPatternGroup TokenId="12" TokenKey="PropertyNameWord" ClassificationTypeKey="CssPropertyName" Pattern="{Word}+" />
				<RegexPatternGroup TokenId="7" TokenKey="PropertyNameText" ClassificationTypeKey="CssPropertyName" Pattern="[^:\}]" />
			</State>
			<!-- PropertyValue state -->
			<State Id="5" Key="PropertyValue" DefaultTokenId="13" DefaultTokenKey="PropertyValueText" DefaultClassificationTypeKey="CssPropertyValue">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="14" TokenKey="PropertyValueStart" Pattern=":" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenId="15" TokenKey="PropertyValueEnd" Pattern=";" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<State.ChildStates>
					<StateRef Key="Comment" />
				</State.ChildStates>
				<RegexPatternGroup TokenId="16" TokenKey="PropertyValueWhitespace" Pattern="{Whitespace}+" />
				<RegexPatternGroup TokenId="17" TokenKey="PropertyValueLineTerminator" Pattern="{LineTerminator}" />
				<RegexPatternGroup TokenId="18" TokenKey="PropertyValueWord" Pattern="{Word}+" />
				<RegexPatternGroup TokenId="13" TokenKey="PropertyValueText" Pattern="[^;\}]" />
			</State>
			<!-- Comment state -->
			<State Id="6" Key="Comment" DefaultTokenId="19" DefaultTokenKey="CommentText" DefaultClassificationTypeKey="CssComment">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="20" TokenKey="CommentStart" Pattern="/*" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenId="21" TokenKey="CommentEnd" Pattern="*/" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<RegexPatternGroup TokenId="19" TokenKey="CommentText" Pattern="[^*]+" />
			</State>
		</DynamicLexer>
	</LanguageDefinition.Lexer>
	<!-- Example text -->
	<LanguageDefinition.ExampleText><![CDATA[/*
	Comment
*/

a { /* Comment */ color: /* Comment */ Red; }

.TestClass {
	color: Black;
	background-color: White;
	text-align: left;
}
]]></LanguageDefinition.ExampleText>
</LanguageDefinition>