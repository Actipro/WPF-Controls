<?xml version="1.0" encoding="utf-8"?>
<!--

Actipro Syntax Language Definition (.langdef)
  For use with Actipro SyntaxEditor and related products.
  http://www.actiprosoftware.com

'HTML' language created by Actipro Software LLC.
  Copyright (c) 2001-2024 Actipro Software LLC.  All rights reserved.

-->
<LanguageDefinition LanguageKey="Html" LanguageDescription="HTML" Creator="Actipro Software LLC" Copyright="Copyright (c) 2001-2024 Actipro Software LLC.  All rights reserved." xmlns="http://schemas.actiprosoftware.com/langdef/1.0">
	<!-- Classification types -->
	<LanguageDefinition.ClassificationTypes>
		<ClassificationType Key="ServerSideScript" Description="Server-Side Script" DefaultStyle="#FF000000,,,#FFFFFF00" DarkStyle="#FF000000,,,#FFFFFFB3" />
		<ClassificationType Key="XmlAttribute" Description="XML Attribute" DefaultStyle="#FFFF0000" DarkStyle="#FF92CAF4" />
		<ClassificationType Key="XmlAttributeValue" Description="XML Attribute Value" DefaultStyle="#FF0000FF" DarkStyle="#FFC8C8C8" />
		<ClassificationType Key="XmlComment" Description="XML Comment" DefaultStyle="#FF008000" DarkStyle="#FF57A64A" />
		<ClassificationType Key="XmlDeclaration" Description="XML Declaration" DefaultStyle="#FFFF00FF" DarkStyle="#FFFFAAF9" />
		<ClassificationType Key="XmlDelimiter" Description="XML Delimiter" DefaultStyle="#FF0000FF" DarkStyle="#FF808080" />
		<ClassificationType Key="XmlEntity" Description="XML Entity" DefaultStyle="#FFFF0000" DarkStyle="#FF92CAF4" />
		<ClassificationType Key="XmlName" Description="XML Name" DefaultStyle="#FFA31515" DarkStyle="#FF569CD6" />
		<ClassificationType Key="XmlProcessingInstruction" Description="XML Processing Instruction" DefaultStyle="#FF808080" DarkStyle="#FFC8C8C8" />
	</LanguageDefinition.ClassificationTypes>
	<!-- Lexer -->
	<LanguageDefinition.Lexer>
		<DynamicLexer>
			<DynamicLexer.Macros>
				<Macro Key="Word" Pattern="[a-zA-Z_0-9\-]" />
				<Macro Key="NonWord" Pattern="[^a-zA-Z_0-9\-]" />
				<Macro Key="TagName" Pattern="[a-zA-Z_0-9\-:\.]" />
			</DynamicLexer.Macros>
			<!-- Default state -->
			<State Id="1" Key="Default">
				<State.ChildStates>
					<StateRef Key="EndTag" />
					<StateRef Key="Comment" />
					<StateRef Key="Declaration" />
					<StateRef Key="ProcessingInstruction" />
					<StateRef Key="AspDirectiveResponseWrite" />
					<StateRef Key="AspDirectiveCode" />
					<StateRef Key="StyleStartTag" />
					<StateRef Key="VBScriptStartTag" />
					<StateRef Key="JavaScriptStartTag" />
					<StateRef Key="StartTag" />
				</State.ChildStates>
				<RegexPatternGroup TokenId="1" TokenKey="Entity" ClassificationTypeKey="XmlEntity" Pattern="&amp; \#? {Word}+ ;?" />
				<RegexPatternGroup TokenId="2" TokenKey="Identifier" Pattern="{Alpha}({Word})*" />
				<RegexPatternGroup TokenId="3" TokenKey="Whitespace" Pattern="{Whitespace}+" />
			</State>
			<!-- StartTag state -->
			<State Id="2" Key="StartTag" DefaultTokenId="4" DefaultTokenKey="StartTagText" DefaultClassificationTypeKey="XmlName">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="5" TokenKey="StartTagStartDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="&lt;" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<RegexPatternGroup TokenId="6" TokenKey="StartTagEndDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="/? &gt;" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<State.ChildStates>
					<StateRef Key="StartTagAttribute" />
				</State.ChildStates>
			</State>
			<!-- StartTagAttribute state -->
			<State Id="3" Key="StartTagAttribute" DefaultTokenId="4" DefaultTokenKey="StartTagText" DefaultClassificationTypeKey="XmlAttribute">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<RegexPatternGroup TokenId="7" TokenKey="StartTagName" ClassificationTypeKey="XmlName" Pattern="{LineTerminatorWhitespace}* {TagName}+ {LineTerminatorWhitespace}*" />
						</Scope.StartPatternGroup>
					</Scope>
				</State.Scopes>
				<State.ChildStates>
					<StateRef Key="StartTagAttributeStringValue" />
					<StateRef Key="StartTagAttributeValue" />
				</State.ChildStates>
				<RegexPatternGroup TokenId="8" TokenKey="StartTagAttribute" ClassificationTypeKey="XmlAttribute" Pattern="{Word}+" LookAheadPattern="{NonWord}|\z" />
			</State>
			<!-- StartTagAttributeValue state -->
			<State Id="4" Key="StartTagAttributeValue" DefaultTokenId="9" DefaultTokenKey="StartTagAttributeValueText" DefaultClassificationTypeKey="XmlAttributeValue">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<RegexPatternGroup TokenId="10" TokenKey="StartTagAttributeValueStartDelimiter" Pattern="= {LineTerminatorWhitespace}*" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<RegexPatternGroup TokenId="11" TokenKey="StartTagAttributeValueEndDelimiter" Pattern="{LineTerminatorWhitespace}+" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<RegexPatternGroup Pattern="{Word}+" />
			</State>
			<!-- StartTagAttributeStringValue state -->
			<State Id="5" Key="StartTagAttributeStringValue" DefaultTokenId="12" DefaultTokenKey="StartTagAttributeStringValueText" DefaultClassificationTypeKey="XmlAttributeValue">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<RegexPatternGroup TokenId="13" TokenKey="StartTagAttributeStringValueStartDelimiter" Pattern="= {LineTerminatorWhitespace}* \&quot;" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<RegexPatternGroup TokenId="14" TokenKey="StartTagAttributeStringValueEndDelimiter" Pattern="\&quot;" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<RegexPatternGroup Pattern="[^&quot;]+" />
			</State>
			<!-- EndTag state -->
			<State Id="6" Key="EndTag" DefaultTokenId="15" DefaultTokenKey="EndTagText" DefaultClassificationTypeKey="XmlName">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="16" TokenKey="EndTagStartDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="&lt;/" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenId="17" TokenKey="EndTagEndDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="&gt;" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<RegexPatternGroup Pattern="[^&gt;]+" />
			</State>
			<!-- AspDirectiveResponseWrite state -->
			<State Id="7" Key="AspDirectiveResponseWrite">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="18" TokenKey="AspDirectiveStartDelimiter" ClassificationTypeKey="ServerSideScript" Pattern="&lt;%" LookAheadPattern="=" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenId="19" TokenKey="AspDirectiveEndDelimiter" ClassificationTypeKey="ServerSideScript" Pattern="%&gt;" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<State.Transition>
					<StateTransition>
						<StateTransition.ChildLanguage>
							<LanguageRef ManifestResourceStreamName="ActiproSoftware.ProductSamples.SyntaxEditorSamples.Languages.Definitions.VBScript.langdef" />
						</StateTransition.ChildLanguage>
					</StateTransition>
				</State.Transition>
			</State>
			<!-- AspDirectiveCode state -->
			<State Id="8" Key="AspDirectiveCode">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="18" TokenKey="AspDirectiveStartDelimiter" ClassificationTypeKey="ServerSideScript" Pattern="&lt;%" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenId="19" TokenKey="AspDirectiveEndDelimiter" ClassificationTypeKey="ServerSideScript" Pattern="%&gt;" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<State.Transition>
					<StateTransition>
						<StateTransition.ChildLanguage>
							<LanguageRef ManifestResourceStreamName="ActiproSoftware.ProductSamples.SyntaxEditorSamples.Languages.Definitions.VBScript.langdef" />
						</StateTransition.ChildLanguage>
					</StateTransition>
				</State.Transition>
			</State>
			<!-- StyleStartTag state -->
			<State Id="9" Key="StyleStartTag" DefaultTokenId="4" DefaultTokenKey="StartTagText" DefaultClassificationTypeKey="XmlName">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="5" TokenKey="StartTagStartDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="&lt;" LookAheadPattern="style" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<RegexPatternGroup TokenId="6" TokenKey="StartTagEndDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="/? &gt;" />
						</Scope.EndPatternGroup>
						<Scope.Transition>
							<StateTransition>
								<StateTransition.ChildLanguage>
									<LanguageRef ManifestResourceStreamName="ActiproSoftware.ProductSamples.SyntaxEditorSamples.Languages.Definitions.Css.langdef" />
								</StateTransition.ChildLanguage>
								<StateTransition.ChildScope>
									<Scope>
										<Scope.EndPatternGroup>
											<ExplicitPatternGroup TokenId="16" TokenKey="EndTagStartDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="&lt;/" LookAheadPattern="style" />
										</Scope.EndPatternGroup>
									</Scope>
								</StateTransition.ChildScope>
							</StateTransition>
						</Scope.Transition>
					</Scope>
				</State.Scopes>
				<State.ChildStates>
					<StateRef Key="StartTagAttribute" />
				</State.ChildStates>
			</State>
			<!-- JavaScriptStartTag state -->
			<State Id="10" Key="JavaScriptStartTag" DefaultTokenId="4" DefaultTokenKey="StartTagText" DefaultClassificationTypeKey="XmlName">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="5" TokenKey="StartTagStartDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="&lt;" LookAheadPattern="script" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<RegexPatternGroup TokenId="6" TokenKey="StartTagEndDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="/? &gt;" />
						</Scope.EndPatternGroup>
						<Scope.Transition>
							<StateTransition>
								<StateTransition.ChildLanguage>
									<LanguageRef ManifestResourceStreamName="ActiproSoftware.ProductSamples.SyntaxEditorSamples.Languages.Definitions.JavaScript.langdef" />
								</StateTransition.ChildLanguage>
								<StateTransition.ChildScope>
									<Scope>
										<Scope.EndPatternGroup>
											<ExplicitPatternGroup TokenId="16" TokenKey="EndTagStartDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="&lt;/" LookAheadPattern="script" />
										</Scope.EndPatternGroup>
									</Scope>
								</StateTransition.ChildScope>
							</StateTransition>
						</Scope.Transition>
					</Scope>
				</State.Scopes>
				<State.ChildStates>
					<StateRef Key="StartTagAttribute" />
				</State.ChildStates>
			</State>
			<!-- VBScriptStartTag state -->
			<State Id="11" Key="VBScriptStartTag" DefaultTokenId="4" DefaultTokenKey="StartTagText" DefaultClassificationTypeKey="XmlName">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="5" TokenKey="StartTagStartDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="&lt;" LookAheadPattern="script {LineTerminatorWhitespace}* language=\&quot; (&quot;VBS&quot; | &quot;VBScript&quot;)" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<RegexPatternGroup TokenId="6" TokenKey="StartTagEndDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="/? &gt;" />
						</Scope.EndPatternGroup>
						<Scope.Transition>
							<StateTransition>
								<StateTransition.ChildLanguage>
									<LanguageRef ManifestResourceStreamName="ActiproSoftware.ProductSamples.SyntaxEditorSamples.Languages.Definitions.VBScript.langdef" />
								</StateTransition.ChildLanguage>
								<StateTransition.ChildScope>
									<Scope>
										<Scope.EndPatternGroup>
											<ExplicitPatternGroup TokenId="16" TokenKey="EndTagStartDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="&lt;/" LookAheadPattern="script" />
										</Scope.EndPatternGroup>
									</Scope>
								</StateTransition.ChildScope>
							</StateTransition>
						</Scope.Transition>
					</Scope>
				</State.Scopes>
				<State.ChildStates>
					<StateRef Key="StartTagAttribute" />
				</State.ChildStates>
			</State>
			<!-- Comment state -->
			<State Id="12" Key="Comment" DefaultTokenId="20" DefaultTokenKey="CommentText" DefaultClassificationTypeKey="XmlComment">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="21" TokenKey="CommentStartDelimiter" Pattern="&lt;!--" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenId="22" TokenKey="CommentEndDelimiter" Pattern="--&gt;" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<RegexPatternGroup Pattern="[^\-]+" />
			</State>
			<!-- ProcessingInstruction state -->
			<State Id="13" Key="ProcessingInstruction" DefaultTokenId="23" DefaultTokenKey="ProcessingInstructionText" DefaultClassificationTypeKey="XmlProcessingInstruction">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="24" TokenKey="ProcessingInstructionStartDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="&lt;?" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenId="25" TokenKey="ProcessingInstructionEndDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="?&gt;" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<RegexPatternGroup Pattern="[^\?]+" />
			</State>
			<!-- Declaration state -->
			<State Id="14" Key="Declaration" DefaultTokenId="26" DefaultTokenKey="DeclarationText" DefaultClassificationTypeKey="XmlDeclaration">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="27" TokenKey="DeclarationStartDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="&lt;!" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenId="28" TokenKey="DeclarationEndDelimiter" ClassificationTypeKey="XmlDelimiter" Pattern="&gt;" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<RegexPatternGroup Pattern="[^&gt;]+" />
			</State>
		</DynamicLexer>
	</LanguageDefinition.Lexer>
	<!-- Example text -->
	<LanguageDefinition.ExampleText><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- This is a comment -->
<html>
<head>
	<title>This is a title.</title>
	<style>
		/* CSS Block */
		a { color: Red; }
	</style>
</head>
<body background="Background.gif" text="Black">
	<script language="JavaScript">
		// JavaScript block
		for (int i = 0; i < 3; i++)
			window.alert('This is some JavaScript code: ' + i);
	</script>
	<script language="VBScript">
		'VBScript block
		Dim i
		For i = 0 To 3
			window.alert("This is some VBScript code: " & CStr(i));
		Next
	</script>
	<%
	'ASP Block
	Dim i 
	For i = 1 To 100
		Response.Write("Item " & CStr(i) & vbCRLF)
	Next 
	%>
	Entity test: &amp; &gt : Test over	
	<singlevals>
		<a href="http://www.actiprosoftware.com" target="_top" />
	</singlevals>
</body>
</html>
]]></LanguageDefinition.ExampleText>
</LanguageDefinition>