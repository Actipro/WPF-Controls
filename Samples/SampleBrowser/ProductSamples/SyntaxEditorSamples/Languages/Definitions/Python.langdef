<?xml version="1.0" encoding="utf-8"?>
<!--

Actipro Syntax Language Definition (.langdef)
  For use with Actipro SyntaxEditor and related products.
  http://www.actiprosoftware.com

'Python' language created by Actipro Software LLC.
  Copyright (c) 2001-2024 Actipro Software LLC.  All rights reserved.

-->
<LanguageDefinition LanguageKey="Python" Creator="Actipro Software LLC" Copyright="Copyright (c) 2001-2024 Actipro Software LLC.  All rights reserved." xmlns="http://schemas.actiprosoftware.com/langdef/1.0">
	<!-- Classification types -->
	<LanguageDefinition.ClassificationTypes>
		<ClassificationType Key="Comment" DefaultStyle="#FF008000" DarkStyle="#FF57A64A" />
		<ClassificationType Key="Keyword" DefaultStyle="#FF0000FF" DarkStyle="#FF569CD6" />
		<ClassificationType Key="Number" />
		<ClassificationType Key="Operator" />
		<ClassificationType Key="Punctuation" />
		<ClassificationType Key="PythonSystemIdentifier" Description="Python System Identifier" DefaultStyle="#FF800080" DarkStyle="#FFD8A0DF" />
		<ClassificationType Key="String" DefaultStyle="#FF800000" DarkStyle="#FFD69D85" />
	</LanguageDefinition.ClassificationTypes>
	<!-- Lexer -->
	<LanguageDefinition.Lexer>
		<DynamicLexer>
			<!-- Default state -->
			<State Id="1" Key="Default">
				<State.ChildStates>
					<StateRef Key="MultiLineString" />
					<StateRef Key="String" />
					<StateRef Key="Comment" />
				</State.ChildStates>
				<RegexPatternGroup TokenId="1" TokenKey="Whitespace" Pattern="{Whitespace}+" />
				<RegexPatternGroup TokenId="2" TokenKey="LineTerminator" Pattern="{LineTerminator}" />
				<RegexPatternGroup TokenId="3" TokenKey="BackSlash" Pattern="\\" LookAheadPattern="{Whitespace}* $" />
				<ExplicitPatternGroup Key="OpenParenthesisPatternGroup" TokenId="4" TokenKey="OpenParenthesis" Pattern="(" />
				<ExplicitPatternGroup Key="CloseParenthesisPatternGroup" TokenId="5" TokenKey="CloseParenthesis" Pattern=")" />
				<ExplicitPatternGroup Key="OpenCurlyBracePatternGroup" TokenId="6" TokenKey="OpenCurlyBrace" Pattern="{" />
				<ExplicitPatternGroup Key="CloseCurlyBracePatternGroup" TokenId="7" TokenKey="CloseCurlyBrace" Pattern="}" />
				<ExplicitPatternGroup Key="OpenSquareBracePatternGroup" TokenId="8" TokenKey="OpenSquareBrace" Pattern="[" />
				<ExplicitPatternGroup Key="CloseSquareBracePatternGroup" TokenId="9" TokenKey="CloseSquareBrace" Pattern="]" />
				<ExplicitPatternGroup TokenId="10" TokenKey="Punctuation" ClassificationTypeKey="Punctuation">
					<ExplicitPatterns><![CDATA[
						. , : ; `
					]]></ExplicitPatterns>
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenId="11" TokenKey="Keyword" ClassificationTypeKey="Keyword" LookAheadPattern="{NonWord}|\z" CaseSensitivity="Sensitive">
					<ExplicitPatterns><![CDATA[
						and assert break class continue def del elif else except exec finally for from global if import in
						is lambda not or pass print raise return try while yield
					]]></ExplicitPatterns>
				</ExplicitPatternGroup>
				<RegexPatternGroup TokenId="12" TokenKey="SystemIdentifier" ClassificationTypeKey="PythonSystemIdentifier" Pattern="__ ({Word})+" />
				<RegexPatternGroup TokenId="13" TokenKey="Identifier" Pattern="(_ | {Alpha})({Word})*" />
				<ExplicitPatternGroup TokenId="14" TokenKey="Operator" ClassificationTypeKey="Operator">
					<ExplicitPatterns><![CDATA[
						== != = += -= *= //= /= %= + - ** * // / % &= |= ^= & | ^ ~ <<= >>= **= << >> <> <= < >= >
					]]></ExplicitPatterns>
				</ExplicitPatternGroup>
				<RegexPatternGroup TokenId="15" TokenKey="RealNumber" ClassificationTypeKey="Number" LookAheadPattern="{NonWord}|\z">
					<RegexPattern Value="{Digit}* \. {Digit}+ ([Ee] [\+\-]? {Digit}+)? [Jj]?" />
					<RegexPattern Value="{Digit}+ [Ee] [\+\-]? {Digit}+ [Jj]?" />
				</RegexPatternGroup>
				<RegexPatternGroup TokenId="16" TokenKey="IntegerNumber" ClassificationTypeKey="Number" Pattern="[1-9]+ {Digit}* [Ll]? [Jj]?" LookAheadPattern="{NonWord}|\z" />
				<RegexPatternGroup TokenId="17" TokenKey="OctalNumber" ClassificationTypeKey="Number" Pattern="0 [0-7]+ [Ll]? [Jj]?" LookAheadPattern="{NonWord}|\z" />
				<RegexPatternGroup TokenId="18" TokenKey="HexNumber" ClassificationTypeKey="Number" Pattern="0 [xX] {HexDigit}+ [Ll]? [Jj]?" LookAheadPattern="{NonWord}|\z" />
			</State>
			<!-- MultiLineString state -->
			<State Id="2" Key="MultiLineString" DefaultTokenId="19" DefaultTokenKey="MultiLineStringText" DefaultClassificationTypeKey="String">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="20" TokenKey="MultiLineStringStartDelimiter" Pattern="'''" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenId="21" TokenKey="MultiLineStringEndDelimiter" Pattern="'''" />
						</Scope.EndPatternGroup>
					</Scope>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="20" TokenKey="MultiLineStringStartDelimiter" Pattern="&quot;&quot;&quot;" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenId="21" TokenKey="MultiLineStringEndDelimiter" Pattern="&quot;&quot;&quot;" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<RegexPatternGroup TokenId="22" TokenKey="MultiLineStringEscapedCharacter" Pattern="\\x {HexDigit}{1,4}" />
				<RegexPatternGroup TokenId="22" TokenKey="MultiLineStringEscapedCharacter" Pattern="\\u {HexDigit}{4,4}" />
				<RegexPatternGroup TokenId="22" TokenKey="MultiLineStringEscapedCharacter" Pattern="\\U {HexDigit}{8,8}" />
				<RegexPatternGroup TokenId="22" TokenKey="MultiLineStringEscapedCharacter" Pattern="\\ {Digit}{3}" />
				<RegexPatternGroup TokenId="22" TokenKey="MultiLineStringEscapedCharacter" Pattern="\\." />
				<RegexPatternGroup TokenId="19" TokenKey="MultiLineStringText" Pattern="[^\\\&quot;']+" />
			</State>
			<!-- String state -->
			<State Id="3" Key="String" DefaultTokenId="23" DefaultTokenKey="StringText" DefaultClassificationTypeKey="String">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="24" TokenKey="StringStartDelimiter" Pattern="'" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<RegexPatternGroup TokenId="25" TokenKey="StringEndDelimiter" Pattern="['\n]" />
						</Scope.EndPatternGroup>
					</Scope>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="24" TokenKey="StringStartDelimiter" Pattern="&quot;" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<RegexPatternGroup TokenId="25" TokenKey="StringEndDelimiter" Pattern="[&quot;\n]" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<RegexPatternGroup TokenId="26" TokenKey="StringEscapedCharacter" Pattern="\\x {HexDigit}{1,4}" />
				<RegexPatternGroup TokenId="26" TokenKey="StringEscapedCharacter" Pattern="\\u {HexDigit}{4,4}" />
				<RegexPatternGroup TokenId="26" TokenKey="StringEscapedCharacter" Pattern="\\U {HexDigit}{8,8}" />
				<RegexPatternGroup TokenId="26" TokenKey="StringEscapedCharacter" Pattern="\\ {Digit}{3}" />
				<RegexPatternGroup TokenId="26" TokenKey="StringEscapedCharacter" Pattern="\\." />
				<RegexPatternGroup TokenId="26" TokenKey="StringEscapedCharacter" Pattern="\\\n" />
				<RegexPatternGroup TokenId="23" TokenKey="StringText" Pattern="[^\\\&quot;'\n]+" />
			</State>
			<!-- Comment state -->
			<State Id="4" Key="Comment" DefaultTokenId="27" DefaultTokenKey="CommentText" DefaultClassificationTypeKey="Comment">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="28" TokenKey="CommentStartDelimiter" Pattern="#" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<RegexPatternGroup TokenId="29" TokenKey="CommentEndDelimiter" Pattern="{LineTerminator}" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<RegexPatternGroup TokenId="27" TokenKey="CommentText" Pattern="{NonLineTerminator}+" />
			</State>
		</DynamicLexer>
	</LanguageDefinition.Lexer>
	<!-- Example text -->
	<LanguageDefinition.ExampleText><![CDATA[#
# PythonSample.py
#
# This file uses some common Python constructs.
#

class FibTest:
    def __init__(self, count):
        if count <= 0:
            raise ValueError("'count' must be larger than zero.")
        self.count = count

    def get_series(self, can_reverse=False):
        """
        Create a Fibonacci series, optionally reverse it, and
        return a result string.
        """
        series = self.fib(self.count)
        if can_reverse:
            series.reverse()
        return 'Fibonacci series up to ' + str(self.count) + \
               ': ' + str(series)

    @staticmethod
    def fib(n):
        """
        Generate a Fibonacci series up to n.
        """
        result = []
        a, b = 0, 1
        while b < n:
            result.append(b)    # add to the list
            a, b = b, a + b
        return result
]]></LanguageDefinition.ExampleText>
</LanguageDefinition>