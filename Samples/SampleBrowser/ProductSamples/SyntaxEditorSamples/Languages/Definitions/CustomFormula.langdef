<?xml version="1.0" encoding="utf-8"?>
<!--

Actipro Syntax Language Definition (.langdef)
  For use with Actipro SyntaxEditor and related products.
  http://www.actiprosoftware.com

'Formula' language created by Actipro Software LLC.
  Copyright (c) 2001-2023 Actipro Software LLC.  All rights reserved.

-->
<LanguageDefinition LanguageKey="Formula" Creator="Actipro Software LLC" Copyright="Copyright (c) 2001-2023 Actipro Software LLC.  All rights reserved." xmlns="http://schemas.actiprosoftware.com/langdef/1.0">
	<!-- Classification types -->
	<LanguageDefinition.ClassificationTypes>
		<ClassificationType Key="Identifier" />
		<ClassificationType Key="Keyword" DefaultStyle="#FF0000FF" />
		<ClassificationType Key="Number" />
		<ClassificationType Key="Operator" />
		<ClassificationType Key="Delimiter" />
		<ClassificationType Key="DelimiterAlt" Description="Delimiter (Alternate)" DefaultStyle="#FFFF0000" />
	</LanguageDefinition.ClassificationTypes>
	<!-- Lexer -->
	<LanguageDefinition.Lexer>
		<DynamicLexer>
			<!-- Default state -->
			<State Id="1" Key="Default">
				<State.Scopes>
					<Scope>
						<!-- NOTE: Parenthesis must appear in properly nested pairs to be recognized as 'OpenParenthesis' and 'CloseParenthesis', others will be treated as a default token -->
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="7" TokenKey="OpenParenthesis" ClassificationTypeKey="DelimiterAlt" Pattern="(" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenId="8" TokenKey="CloseParenthesis" ClassificationTypeKey="DelimiterAlt" Pattern=")" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<State.ChildStates>
					<StateRef Key="NestedParenthesis" />
				</State.ChildStates>
				<!-- NOTE: All patterns in the 'Default' state must be replicated in the 'NestedParenthesis' state -->
				<RegexPatternGroup TokenId="1" TokenKey="Whitespace" Pattern="{LineTerminatorWhitespace}+" />
				<ExplicitPatternGroup TokenId="2" TokenKey="Keyword" ClassificationTypeKey="Keyword" LookAheadPattern="{NonWord}|\z" CaseSensitivity="Sensitive">
					<ExplicitPatterns><![CDATA[
						ABS AVERAGE MIN MAX SUM
					]]></ExplicitPatterns>
				</ExplicitPatternGroup>
				<RegexPatternGroup TokenId="3" TokenKey="Identifier" ClassificationTypeKey="Identifier" Pattern="(_ | {Alpha})({Word})*" />
				<ExplicitPatternGroup TokenId="4" TokenKey="Operator" ClassificationTypeKey="Operator">
					<ExplicitPatterns><![CDATA[
						= != + - * /
					]]></ExplicitPatterns>
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenId="5" TokenKey="Punctuation">
					<ExplicitPatterns><![CDATA[
						,
					]]></ExplicitPatterns>
				</ExplicitPatternGroup>
				<RegexPatternGroup TokenId="6" TokenKey="Number" ClassificationTypeKey="Number" Pattern="{Digit}* \. {Digit}+" LookAheadPattern="{NonWord}|\z" />
				<RegexPatternGroup TokenId="6" TokenKey="Number" ClassificationTypeKey="Number" Pattern="{Digit}+" LookAheadPattern="{NonWord}|\z" />
			</State>
			<!-- Nested parenthesis state -->
			<State Id="2" Key="NestedParenthesis">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="7" TokenKey="OpenParenthesis" ClassificationTypeKey="Delimiter" Pattern="(" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<ExplicitPatternGroup TokenId="8" TokenKey="CloseParenthesis" ClassificationTypeKey="Delimiter" Pattern=")" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<State.ChildStates>
					<StateRef Key="Default" />
				</State.ChildStates>
				<RegexPatternGroup TokenId="1" TokenKey="Whitespace" Pattern="{LineTerminatorWhitespace}+" />
				<ExplicitPatternGroup TokenId="2" TokenKey="Keyword" ClassificationTypeKey="Keyword" LookAheadPattern="{NonWord}|\z" CaseSensitivity="Sensitive">
					<ExplicitPatterns><![CDATA[
						ABS AVERAGE MIN MAX SUM
					]]></ExplicitPatterns>
				</ExplicitPatternGroup>
				<RegexPatternGroup TokenId="3" TokenKey="Identifier" ClassificationTypeKey="Identifier" Pattern="(_ | {Alpha})({Word})*" />
				<ExplicitPatternGroup TokenId="4" TokenKey="Operator" ClassificationTypeKey="Operator">
					<ExplicitPatterns><![CDATA[
						= != + - * /
					]]></ExplicitPatterns>
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenId="5" TokenKey="Punctuation">
					<ExplicitPatterns><![CDATA[
						,
					]]></ExplicitPatterns>
				</ExplicitPatternGroup>
				<RegexPatternGroup TokenId="6" TokenKey="Number" ClassificationTypeKey="Number" Pattern="{Digit}* \. {Digit}+" LookAheadPattern="{NonWord}|\z" />
				<RegexPatternGroup TokenId="6" TokenKey="Number" ClassificationTypeKey="Number" Pattern="{Digit}+" LookAheadPattern="{NonWord}|\z" />
			</State>
		</DynamicLexer>
	</LanguageDefinition.Lexer>
	<!-- Example text -->
	<LanguageDefinition.ExampleText><![CDATA[AVERAGE(100, ABS(x2 - (x1 + 1)))]]></LanguageDefinition.ExampleText>
</LanguageDefinition>