<sampleBrowser:ProductItemControl 
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:sampleBrowser="clr-namespace:ActiproSoftware.SampleBrowser"
	xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared"	
	xmlns:themes="http://schemas.actiprosoftware.com/winfx/xaml/themes"
	xmlns:grids="http://schemas.actiprosoftware.com/winfx/xaml/grids"
	xmlns:gridseditors="http://schemas.actiprosoftware.com/winfx/xaml/gridseditors" 
	xmlns:local="clr-namespace:ActiproSoftware.ProductSamples.BarsSamples.QuickStart.GalleryInRibbon">

	<sampleBrowser:ProductItemControl.Resources>

		<!-- Define the options used by this sample -->
		<local:OptionsViewModel x:Key="SampleOptions" />
		
	</sampleBrowser:ProductItemControl.Resources>

	<sampleBrowser:ProductItemControl.SideBarContent>
		<StackPanel>

			<Expander Style="{StaticResource SampleHeaderOptionsExpanderStyle}">
				<sampleBrowser:SampleOptionsPropertyGrid>
					<grids:PropertyModel CanAutoConfigure="True" Value="{Binding Mode=TwoWay, Source={StaticResource SampleOptions}, Path=UseAccentedItemBorder}" />
					<grids:PropertyModel CanAutoConfigure="True" Value="{Binding Mode=TwoWay, Source={StaticResource SampleOptions}, Path=ItemSpacing}">
						<gridseditors:Int32PropertyEditor Minimum="0" Maximum="20" />
					</grids:PropertyModel>
					<grids:PropertyModel CanAutoConfigure="True" Value="{Binding Mode=TwoWay, Source={StaticResource SampleOptions}, Path=MinMediumRibbonColumnCount}">
						<gridseditors:Int32PropertyEditor Minimum="1" Maximum="50" />
					</grids:PropertyModel>
					<grids:PropertyModel CanAutoConfigure="True" Value="{Binding Mode=TwoWay, Source={StaticResource SampleOptions}, Path=MinLargeRibbonColumnCount}">
						<gridseditors:Int32PropertyEditor Minimum="1" Maximum="50" />
					</grids:PropertyModel>
					<grids:PropertyModel CanAutoConfigure="True" Value="{Binding Mode=TwoWay, Source={StaticResource SampleOptions}, Path=MaxRibbonColumnCount}">
						<gridseditors:Int32PropertyEditor Minimum="1" Maximum="100" />
					</grids:PropertyModel>
					<grids:PropertyModel CanAutoConfigure="True" Value="{Binding Mode=TwoWay, Source={StaticResource SampleOptions}, Path=MinMenuColumnCount}">
						<gridseditors:Int32PropertyEditor Minimum="1" Maximum="50" />
					</grids:PropertyModel>
					<grids:PropertyModel CanAutoConfigure="True" Value="{Binding Mode=TwoWay, Source={StaticResource SampleOptions}, Path=MaxMenuColumnCount}">
						<gridseditors:Int32PropertyEditor Minimum="1" Maximum="50" />
					</grids:PropertyModel>
					<grids:PropertyModel CanAutoConfigure="True" Value="{Binding Mode=TwoWay, Source={StaticResource SampleOptions}, Path=MenuResizeMode}" />
					<grids:PropertyModel CanAutoConfigure="True" Value="{Binding Mode=TwoWay, Source={StaticResource SampleOptions}, Path=CanCategorizeOnMenu}" />
					<grids:PropertyModel CanAutoConfigure="True" Value="{Binding Mode=TwoWay, Source={StaticResource SampleOptions}, Path=CanFilterOnMenu}" />
					<grids:PropertyModel CanAutoConfigure="True" Value="{Binding Mode=TwoWay, Source={StaticResource SampleOptions}, Path=IsSetColorCommandEnabled}" />
				</sampleBrowser:SampleOptionsPropertyGrid>
			</Expander>

			<Expander Style="{StaticResource SampleHeaderDescriptionExpanderStyle}">
				<TextBlock Style="{StaticResource SampleHeaderDescriptionTextBlockStyle}">
					The Actipro Ribbon provides extremely flexible support for gallery implementations. This sample shows a subset of the features
					found in galleries, most notably use of the RibbonGallery control.
					<LineBreak /><LineBreak />
					RibbonGallery automatically adjusts between 1, 2, or 3 rows, which depends on the size of the items being displayed. This sample
					provides an option to change the ItemTemplate used to display gallery items, each with a slighlty different appearance that will
					change the number of rows that can be displayed at the same time.
					<LineBreak /><LineBreak />
					When expanded, the RibbonGallery items are displayed using a MenuGallery. Additional menu items can be configured to display below
					the MenuGallery, and the number of columns displayed in the MenuGallery can be configured independently of the number of columns in the RibbonGallery.
					The MenuGallery can optionally support resizing as well.
					<LineBreak /><LineBreak />
					The RibbonGallery control provides variant sizing behavior that makes it fit nicely into the parent Ribbon as it is resized.
					At the smallest variant size, the RibbonGallery will render similar to a BarPopupButton. As additional space is availble to display
					columns of gallery items, a couple properties determine the minimum number of columns that must be available at the medium and
					large variant sizes respectively. Resize this sample and watch how the number of columns in the RibbonGallery adjusts until
					it hits the breakpoint between the medium and large variant sizes. Since the Layout group is configured to change its variant size
					before the RibbonGallery, those buttons will change their size before the RibbonGroup transitions between variants.
				</TextBlock>
			</Expander>

		</StackPanel>
	</sampleBrowser:ProductItemControl.SideBarContent>

	<ScrollViewer Style="{StaticResource SampleScrollViewerStyle}" HorizontalScrollBarVisibility="Disabled">
		<StackPanel Style="{StaticResource SamplePanelFullStyle}">

			<shared:ShadowChrome Elevation="16" ShadowOpacity="{DynamicResource {x:Static themes:AssetResourceKeys.ShadowOpacitySoftDoubleKey}}">
				<Border BorderThickness="1" BorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.WindowBorderActiveBrushKey}}"
						Background="{DynamicResource {x:Static themes:AssetResourceKeys.WindowBackgroundNormalBrushKey}}">

					<!-- MVVM-Based Ribbon Sample Control -->
					<local:SampleMvvmControl Options="{StaticResource SampleOptions}" Height="250" />

				</Border>
			</shared:ShadowChrome>

			<shared:ShadowChrome Margin="0,40,0,0" Elevation="16" ShadowOpacity="{DynamicResource {x:Static themes:AssetResourceKeys.ShadowOpacitySoftDoubleKey}}">
				<Border BorderThickness="1" BorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.WindowBorderActiveBrushKey}}"
						Background="{DynamicResource {x:Static themes:AssetResourceKeys.WindowBackgroundNormalBrushKey}}">

					<!-- XAML-Based Ribbon Sample Control -->
					<local:SampleXamlControl Options="{StaticResource SampleOptions}" Height="250" />

				</Border>
			</shared:ShadowChrome>

		</StackPanel>
	</ScrollViewer>

</sampleBrowser:ProductItemControl>
