<!--

RIBBON GETTING STARTED SERIES - STEP 5

STEP SUMMARY:

	This step is a big advancement over the previous steps. Until now, only small
	concepts have been introduced with each step. This step will build upon all of those
	smaller concepts to populate more tabs and controls in the Ribbon. The stand-alone
	Help button is replaced by an editor that will better showcase the new commands that
	are added in this step and future steps.
	
CHANGES SINCE LAST STEP:
	
	The stand-alone WPF "Help" button was removed and replaced with an instance of a
	RichTextBox editor control that has been extended for use by this sample application.
	The editor control is decorated with UI controls that improve the appearance of the
	editor, but are not directly related to the configuration of the Ribbon control.
	FocusManager is configured to automatically focus the editor element when the window
	is displayed. Including this control also added the 'shared' and 'samplesCommon'
	namespace entries.
	
	See the "SampleWindowViewModel.cs" file for details on a new "Home" tab with "Undo"
	and "Clipboard" control groups. The following guidelines apply to adding support for
	new Ribbon configurations:
	
		For every new Ribbon Tab...
			- Add to the Tabs collection in SampleWindowViewModel.
	
		For every new Ribbon Group...
			- Add key to SampleBarControlKeys.
			- Optionally configure collapsed image using SampleBarManager.RegisterImages.
			- Add to the appropriate Ribbon Tab view model in SampleRibbonViewModel.
	
		For every new Ribbon Control...
			- Add key to SampleBarControlKeys.
			- Configure large and/or small images using SampleBarManager.RegisterImages.
			- Configure view model using SampleBarManager.RegisterControlViewModels.
			- Add to the appropriate Ribbon Group in SampleRibbonViewModel.

	Prior sample comments were removed/condensed.
	
EXPECTED OPERATION:
	
	When this sample window is opened, the Ribbon should display "Home" and "Help" tabs with
	the "Home" tab selected. On the "Home" tab will be control groups for "Undo" and "Clipboard".
	Since the "Undo" and "Clipboard" groups contain commands based on RoutedUICommand, these
	commands will automatically work with the editor. Undo, Redo, Cut, Copy, and Paste controls
	should exhibit typical behavor for an edit control.
	
	Since the "Paste Special" command is not implemented, attempting to select this command
	will display a "Not Implemented" message.

-->

<bars:RibbonWindow
	x:Class="ActiproSoftware.ProductSamples.BarsSamples.QuickStart.GettingStarted.Step05.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:bars="http://schemas.actiprosoftware.com/winfx/xaml/bars"
	xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared"
	xmlns:themes="http://schemas.actiprosoftware.com/winfx/xaml/themes"
	xmlns:samplesCommon="clr-namespace:ActiproSoftware.ProductSamples.BarsSamples.Common"
	xmlns:gettingStartedCommon="clr-namespace:ActiproSoftware.ProductSamples.BarsSamples.QuickStart.GettingStarted.Common"
    Title="Actipro Ribbon Sample" Height="450" Width="800"
	ResizeMode="CanResizeWithGrip"
	FocusManager.FocusedElement="{Binding ElementName=editor}"
	>

	<bars:RibbonContainerPanel>

		<!-- Ribbon Control -->
		<bars:Ribbon DataContext="{Binding Ribbon}" Style="{StaticResource {x:Static themes:BarsMvvmResourceKeys.RibbonStyle}}" />

		<!-- Window Content -->
		<DockPanel>

			<!-- Configure common StatusBar that is unrelated to this sample -->
			<gettingStartedCommon:CommonStatusBar DockPanel.Dock="Bottom" SampleCodePath="/Step05/MainWindow" />

			<!--
			SAMPLE NOTE 5.1:
				The stand-alone WPF Button used in earlier steps is being replaced with an instance of
				a RichTextBox that has been extended specifically for use in these samples. The specifics
				of this control are not related to building the Ribbon in this series, but it does provide
				a great target for various commands that will be placed in the Ribbon.
			-->
			<ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" Focusable="False">
				<shared:ShadowChrome Margin="32,20" RenderMode="ShaderEffectsRequired" Elevation="6" ShadowOpacity="0.1">
					<Border MaxWidth="690" BorderThickness="1" BorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerBorderLowBrushKey}}">
						<samplesCommon:RichTextBoxExtended x:Name="editor" />
					</Border>
				</shared:ShadowChrome>
			</ScrollViewer>

		</DockPanel>


	</bars:RibbonContainerPanel>
	
</bars:RibbonWindow>
