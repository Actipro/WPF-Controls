<sampleBrowser:ProductItemControl 
	x:Class="ActiproSoftware.ProductSamples.GridsSamples.QuickStart.PropertyGridCollectionDisplayMode.MainControl"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:grids="http://schemas.actiprosoftware.com/winfx/xaml/grids"
	xmlns:sample="clr-namespace:ActiproSoftware.ProductSamples.GridsSamples.QuickStart.PropertyGridCollectionDisplayMode"
	xmlns:sampleBrowser="clr-namespace:ActiproSoftware.SampleBrowser"
	>

	<sampleBrowser:ProductItemControl.Resources>

		<sample:ParentObject x:Key="ParentObject" />

	</sampleBrowser:ProductItemControl.Resources>

	<sampleBrowser:ProductItemControl.SideBarContent>
		<StackPanel>

			<Expander Style="{StaticResource SampleHeaderOptionsExpanderStyle}">
				<sampleBrowser:SampleOptionsPropertyGrid>
					<grids:PropertyModel CanAutoConfigure="True" Value="{Binding Mode=TwoWay, ElementName=propGrid, Path=CollectionPropertyDisplayMode}" DisplayName="Collection display mode" />
					<grids:PropertyModel>
						<grids:PropertyModel.ValueTemplate>
							<DataTemplate>
								<Button Content="Add to List" HorizontalAlignment="Left" Click="OnAddItemToListButtonClick" />
							</DataTemplate>
						</grids:PropertyModel.ValueTemplate>
					</grids:PropertyModel>
					<grids:PropertyModel>
						<grids:PropertyModel.ValueTemplate>
							<DataTemplate>
								<Button Content="Add to Observable Collection" HorizontalAlignment="Left" Click="OnAddItemToObservableCollectionButtonClick" />
							</DataTemplate>
						</grids:PropertyModel.ValueTemplate>
					</grids:PropertyModel>
				</sampleBrowser:SampleOptionsPropertyGrid>
			</Expander>

			<Expander Style="{StaticResource SampleHeaderDescriptionExpanderStyle}">
				<TextBlock Style="{StaticResource SampleHeaderDescriptionTextBlockStyle}">
					The property grid includes special support for collection properties, which include types that
					implement ICollection, IList, IDictionary, or the generic variations. 
					By default, the type converter associated with the collection property/type will be used for display purposes. 
					This means that only arrays will be expandable out of the box, since .NET doesn't implement an expandable type converter for lists or dictionaries.
					<LineBreak /><LineBreak />
					The CollectionPropertyDisplayMode property allows the type converter to be overridden and for all collections to be expandable by default. 
					In addition, collection editing buttons may be included that allow the end user to add or remove items during runtime.
				</TextBlock>
			</Expander>

		</StackPanel>
	</sampleBrowser:ProductItemControl.SideBarContent>

	<Grid Style="{StaticResource SamplePanelWideStyle}">

		<grids:PropertyGrid x:Name="propGrid" MaxWidth="{StaticResource SampleThinMaxWidth}"
							DataObject="{StaticResource ParentObject}" CanClearDataObjectOnUnload="True">
		</grids:PropertyGrid>

	</Grid>

</sampleBrowser:ProductItemControl>
