<sampleBrowser:ProductItemControl 
	x:Class="ActiproSoftware.ProductSamples.GridsSamples.QuickStart.PropertyGridDynamicProperties.MainControl"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:grids="http://schemas.actiprosoftware.com/winfx/xaml/grids"
	xmlns:sample="clr-namespace:ActiproSoftware.ProductSamples.GridsSamples.QuickStart.PropertyGridDynamicProperties"
	xmlns:sampleBrowser="clr-namespace:ActiproSoftware.SampleBrowser"
	>

	<sampleBrowser:ProductItemControl.Resources>

		<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

		<sample:DisplayOutput x:Key="DisplayOutput" />

	</sampleBrowser:ProductItemControl.Resources>

	<sampleBrowser:ProductItemControl.SideBarContent>
		<StackPanel>

			<Expander Style="{StaticResource SampleHeaderDescriptionExpanderStyle}">
				<TextBlock Style="{StaticResource SampleHeaderDescriptionTextBlockStyle}">
					This sample shows how property models can have dynamic features such as being selectively read-only or visible based on another property's value.
					It also shows how a property model's standard values can be altered on the fly.
					<LineBreak /><LineBreak />
					One way to accomplish this is to define a custom data factory, property model, and interface that can be used to make 
					property model features dynamic as needed.
					<LineBreak /><LineBreak />
					Toggle the Target property and see how other properties adjust themselves in the property grid.
				</TextBlock>
			</Expander>

		</StackPanel>
	</sampleBrowser:ProductItemControl.SideBarContent>

	<Grid Style="{StaticResource SamplePanelWideStyle}">

		<grids:PropertyGrid x:Name="propGrid" MaxWidth="{StaticResource SampleThinMaxWidth}"
							DataObject="{StaticResource DisplayOutput}" IsCategorized="False" SortComparer="{x:Null}" 
							CanSummaryAutoSize="True" SummaryHeight="Auto" CanClearDataObjectOnUnload="True">
			<grids:PropertyGrid.DataFactory>
				<sample:CustomDataFactory />
			</grids:PropertyGrid.DataFactory>
			<grids:PropertyGrid.ItemContainerStyleSelector>
				<grids:PropertyGridItemStyleSelector>
					<grids:PropertyGridItemStyleSelector.PropertyStyle>
						<Style TargetType="grids:PropertyGridItem">
							<Setter Property="Visibility" Value="{Binding IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />
						</Style>
					</grids:PropertyGridItemStyleSelector.PropertyStyle>
				</grids:PropertyGridItemStyleSelector>
			</grids:PropertyGrid.ItemContainerStyleSelector>
		</grids:PropertyGrid>
	</Grid>

</sampleBrowser:ProductItemControl>
